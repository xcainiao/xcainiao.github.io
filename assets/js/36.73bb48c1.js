(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{336:function(a,f,e){"use strict";e.r(f);var t=e(1),n=Object(t.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var a=this,f=a.$createElement,e=a._self._c||f;return e("div",{staticClass:"content"},[e("h2",{attrs:{id:"git-log"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-log","aria-hidden":"true"}},[a._v("#")]),a._v(" git log")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("commit e0002e2b52e0c6877d196a16488692b5dbfd7ac9\nAuthor: Martin Mitas <mity@morous.org>\nDate:   Wed Dec 27 09:45:34 2017 +0100\n\n    md4c.h: Fix some copy&paste errors in comments.\n")])])]),e("h2",{attrs:{id:"error"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#error","aria-hidden":"true"}},[a._v("#")]),a._v(" error")]),a._v(" "),e("p",[a._v("./md2html md4c_heap-buffer-overflow_md4c")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("==26370==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x60300000f000 at pc 0x7f8e75e343ca bp 0x7fff7ec8b0f0 sp 0x7fff7ec8b0e0\nWRITE of size 4 at 0x60300000f000 thread T0\n    #0 0x7f8e75e343c9 in md_build_attribute /home/github/md4cg/md4c/md4c.c:1491\n    #1 0x7f8e75e4e584 in md_setup_fenced_code_detail /home/github/md4cg/md4c/md4c.c:4377\n    #2 0x7f8e75e4ea94 in md_process_leaf_block /home/github/md4cg/md4c/md4c.c:4419\n    #3 0x7f8e75e4fb28 in md_process_all_blocks /home/github/md4cg/md4c/md4c.c:4528\n    #4 0x7f8e75e5b574 in md_process_doc /home/github/md4cg/md4c/md4c.c:5854\n    #5 0x7f8e75e5b99c in md_parse /home/github/md4cg/md4c/md4c.c:5915\n    #6 0x4045ac in md_render_html /home/github/md4cg/md2html/render_html.c:488\n    #7 0x401b4a in process_file /home/github/md4cg/md2html/md2html.c:139\n    #8 0x402394 in main /home/github/md4cg/md2html/md2html.c:343\n    #9 0x7f8e75a7b82f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2082f)\n    #10 0x4012c8 in _start (/home//github/md4cg/md2html/md2html+0x4012c8)\n\n0x60300000f000 is located 0 bytes to the right of 32-byte region [0x60300000efe0,0x60300000f000)\nallocated by thread T0 here:\n    #0 0x7f8e760fb961 in realloc (/usr/lib/x86_64-linux-gnu/libasan.so.2+0x98961)\n    #1 0x7f8e75e3327f in md_build_attr_append_substr /home/github/md4cg/md4c/md4c.c:1392\n    #2 0x7f8e75e33e6b in md_build_attribute /home/github/md4cg/md4c/md4c.c:1482\n    #3 0x7f8e75e4e584 in md_setup_fenced_code_detail /home/github/md4cg/md4c/md4c.c:4377\n    #4 0x7f8e75e4ea94 in md_process_leaf_block /home/github/md4cg/md4c/md4c.c:4419\n    #5 0x7f8e75e4fb28 in md_process_all_blocks /home/github/md4cg/md4c/md4c.c:4528\n    #6 0x7f8e75e5b574 in md_process_doc /home/github/md4cg/md4c/md4c.c:5854\n    #7 0x7f8e75e5b99c in md_parse /home/github/md4cg/md4c/md4c.c:5915\n    #8 0x4045ac in md_render_html /home/github/md4cg/md2html/render_html.c:488\n    #9 0x401b4a in process_file /home/github/md4cg/md2html/md2html.c:139\n    #10 0x402394 in main /home//github/md4cg/md2html/md2html.c:343\n    #11 0x7f8e75a7b82f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2082f)\n\nSUMMARY: AddressSanitizer: heap-buffer-overflow /home/github/md4cg/md4c/md4c.c:1491 md_build_attribute\nShadow bytes around the buggy address:\n  0x0c067fff9db0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c067fff9dc0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c067fff9dd0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c067fff9de0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c067fff9df0: fa fa fa fa fa fa fa fa fa fa fa fa 00 00 00 00\n=>0x0c067fff9e00:[fa]fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c067fff9e10: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c067fff9e20: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c067fff9e30: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c067fff9e40: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c067fff9e50: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\nShadow byte legend (one shadow byte represents 8 application bytes):\n  Addressable:           00\n  Partially addressable: 01 02 03 04 05 06 07 \n  Heap left redzone:       fa\n  Heap right redzone:      fb\n  Freed heap region:       fd\n  Stack left redzone:      f1\n  Stack mid redzone:       f2\n  Stack right redzone:     f3\n  Stack partial redzone:   f4\n  Stack after return:      f5\n  Stack use after scope:   f8\n  Global redzone:          f9\n  Global init order:       f6\n  Poisoned by user:        f7\n  Container overflow:      fc\n  Array cookie:            ac\n  Intra object redzone:    bb\n  ASan internal:           fe\n==26370==ABORTING\n")])])]),e("p",[a._v("testcase: https://github.com/xcainiao/poc/blob/master/md4c_heap-buffer-overflow_md4c")]),a._v(" "),e("h2",{attrs:{id:"analysis"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#analysis","aria-hidden":"true"}},[a._v("#")]),a._v(" analysis")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('Breakpoint 3, md_build_attr_append_substr (ctx=0x7fffffffd8a0, build=0x7fffffffd560, type=MD_TEXT_NORMAL, off=0x0) at md4c.c:1392\n1392\t        new_substr_offsets = (OFF*) realloc(build->substr_offsets, build->substr_alloc * sizeof(OFF));\ngdb-peda$ print build->substr_alloc\n$4 = 0x8\n\nBreakpoint 2, md_build_attribute (ctx=0x7fffffffd8a0, raw_text=0x62d00000a411 "\\001", raw_size=0x8, flags=0x0, attr=0x7fffffffd500, build=0x7fffffffd560) at md4c.c:1491\n1491\t        build->substr_offsets[build->substr_count] = off;\ngdb-peda$ print build->substr_count\n$3 = 0x8\ngdb-peda$ \n')])])]),e("h2",{attrs:{id:"fuzz"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#fuzz","aria-hidden":"true"}},[a._v("#")]),a._v(" fuzz")]),a._v(" "),e("p",[a._v("libfuzz")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('#define filename  "./x.md"\nint LLVMFuzzerTestOneInput(char *data, int size)\n{\n    FILE* in = stdin;\n    FILE* out = stdout;\n    int ret = 0;\n    FILE* temfile = fopen(filename,"w");\n    fwrite(data, 1, size, temfile);\n    fclose(temfile);\n\n    if(input_path != NULL && strcmp(input_path, "-") != 0) {\n        in = fopen(input_path, "rb");\n        if(in == NULL) {\n            fprintf(stderr, "Cannot open %s.\\n", input_path);\n            exit(1);\n        }\n    }   \n    if(output_path != NULL && strcmp(output_path, "-") != 0) {\n        out = fopen(output_path, "wt");\n        if(out == NULL) {\n            fprintf(stderr, "Cannot open %s.\\n", input_path);\n            exit(1);\n        }\n    }   \n\n    ret = process_file(in, out);\n    if(in != stdin)\n        fclose(in);\n    if(out != stdout)\n        fclose(out);\n\n    return ret;\n}\n')])])])])}],!1,null,null,null);f.default=n.exports}}]);