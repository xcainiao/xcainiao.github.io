(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{371:function(a,f,e){"use strict";e.r(f);var n=e(1),r=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var a=this,f=a.$createElement,e=a._self._c||f;return e("div",{staticClass:"content"},[e("h2",{attrs:{id:"git-log"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-log","aria-hidden":"true"}},[a._v("#")]),a._v(" git log")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("commit 852e6b25b48b9ce5d73d4dd0fb0162386f7f3ced\nAuthor: Syoyo Fujita <syoyo@lighttransport.com>\nDate:   Thu Jan 11 21:38:40 2018 +0900\n\n    Fix a heap OOB read in DecodeChunk. Fixes #60\n")])])]),e("h2",{attrs:{id:"error"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#error","aria-hidden":"true"}},[a._v("#")]),a._v(" error")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("==36==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x60200000efb3 at pc 0x00000053069b bp 0x7fff61d178b0 sp 0x7fff61d178a8\nREAD of size 4 at 0x60200000efb3 thread T0\n    #0 0x53069a in tinyexr::ParseEXRHeader(tinyexr::HeaderInfo*, bool*, _EXRVersion const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, unsigned char const*, unsigned long) /fuzzing/tinyexr/./tinyexr.h:10246:7\n    #1 0x52e80a in ParseEXRHeaderFromMemory /fuzzing/tinyexr/./tinyexr.h:10898:13\n    #2 0x53e8e8 in LLVMFuzzerTestOneInput /fuzzing/tinyexr/fuzzer.cc:14:9\n    #3 0x5100dc in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) (/fuzzing/tinyexr/fuzzer+0x5100dc)\n    #4 0x50f89e in fuzzer::Fuzzer::RunOne(unsigned char const*, unsigned long) (/fuzzing/tinyexr/fuzzer+0x50f89e)\n    #5 0x5096fd in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*) (/fuzzing/tinyexr/fuzzer+0x5096fd)\n    #6 0x50abcf in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) (/fuzzing/tinyexr/fuzzer+0x50abcf)\n    #7 0x5095ac in main (/fuzzing/tinyexr/fuzzer+0x5095ac)\n    #8 0x7f4e8fa1b2b0 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x202b0)\n    #9 0x41ecb9 in _start (/fuzzing/tinyexr/fuzzer+0x41ecb9)\n\n0x60200000efb3 is located 2 bytes to the right of 1-byte region [0x60200000efb0,0x60200000efb1)\nallocated by thread T0 here:\n    #0 0x506230 in operator new(unsigned long) (/fuzzing/tinyexr/fuzzer+0x506230)\n    #1 0x5137e6 in std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long) (/fuzzing/tinyexr/fuzzer+0x5137e6)\n    #2 0x52ee28 in tinyexr::ParseEXRHeader(tinyexr::HeaderInfo*, bool*, _EXRVersion const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, unsigned char const*, unsigned long) /fuzzing/tinyexr/./tinyexr.h:10127:10\n    #3 0x52e80a in ParseEXRHeaderFromMemory /fuzzing/tinyexr/./tinyexr.h:10898:13\n    #4 0x53e8e8 in LLVMFuzzerTestOneInput /fuzzing/tinyexr/fuzzer.cc:14:9\n    #5 0x5100dc in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) (/fuzzing/tinyexr/fuzzer+0x5100dc)\n    #6 0x5095ac in main (/fuzzing/tinyexr/fuzzer+0x5095ac)\n\nSUMMARY: AddressSanitizer: heap-buffer-overflow /fuzzing/tinyexr/./tinyexr.h:10246:7 in tinyexr::ParseEXRHeader(tinyexr::HeaderInfo*, bool*, _EXRVersion const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, unsigned char const*, unsigned long)\nShadow bytes around the buggy address:\n  0x0c047fff9da0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c047fff9db0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c047fff9dc0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c047fff9dd0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c047fff9de0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n=>0x0c047fff9df0: fa fa fa fa fa fa[01]fa fa fa 01 fa fa fa fd fa\n  0x0c047fff9e00: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c047fff9e10: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c047fff9e20: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c047fff9e30: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c047fff9e40: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\nShadow byte legend (one shadow byte represents 8 application bytes):\n  Addressable:           00\n  Partially addressable: 01 02 03 04 05 06 07 \n  Heap left redzone:       fa\n  Heap right redzone:      fb\n  Freed heap region:       fd\n  Stack left redzone:      f1\n  Stack mid redzone:       f2\n  Stack right redzone:     f3\n  Stack partial redzone:   f4\n  Stack after return:      f5\n  Stack use after scope:   f8\n  Global redzone:          f9\n  Global init order:       f6\n  Poisoned by user:        f7\n  Container overflow:      fc\n  Array cookie:            ac\n  Intra object redzone:    bb\n  ASan internal:           fe\n  Left alloca redzone:     ca\n  Right alloca redzone:    cb\n==36==ABORTING\n")])])]),e("p",[a._v("testcase:https://github.com/xcainiao/poc/blob/master/tinyexr_memcpy_heap-buffer-overflow")])])}],!1,null,null,null);f.default=r.exports}}]);