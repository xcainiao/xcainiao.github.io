(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{341:function(t,n,e){"use strict";e.r(n);var a=e(1),s=Object(a.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("div",{staticClass:"content"},[e("h2",{attrs:{id:"_0x1-cgo"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_0x1-cgo","aria-hidden":"true"}},[t._v("#")]),t._v(" 0x1 cgo")]),t._v(" "),e("p",[t._v("golang 编译成so")]),t._v(" "),e("ol",[e("li",[t._v('import "C"')]),t._v(" "),e("li",[t._v("需要调用的函数加上外部注释 例如//export Test")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('package main\n\nimport "C"\n\nimport (\n    "fmt"\n)\n\n//export Test\nfunc Test(str *C.char) {\n     fmt.Println("hello world")\n}\n\nfunc main() {\n}\n')])])]),e("p",[t._v("编译")]),t._v(" "),e("p",[t._v("go  build -o test.so -buildmode=c-shared ./test.go")]),t._v(" "),e("p",[t._v("生成test.h、test.so 两个文件")]),t._v(" "),e("p",[t._v("c 程序")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('#include "test.h"\n#include <stdio.h>\n\nint main(){\n    Test("123");\n    return 0;\n}\n')])])]),e("p",[t._v("编译\ngcc test.c -o test test.so")]),t._v(" "),e("h2",{attrs:{id:"_0x2-test"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_0x2-test","aria-hidden":"true"}},[t._v("#")]),t._v(" 0x2 test")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('package main\n\nimport "C"\n\nimport (\n    "fmt"\n    "strconv"\n)\n\n//export Test\nfunc Test(str *C.char) {\n     s := C.GoString(str)\n     var a [4]int\n     num, _ := strconv.Atoi(s)\n     fmt.Println(num)\n     for i := 1; i < num; i++ {\n         fmt.Println(a[i])\n    }\n}\n\nfunc main() {\n}\n')])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('#include "base.h"\n#include <stdio.h>\n\nint LLVMFuzzerTestOneInput(char *data, int size) {\n    Test("123");\n    return 0;\n}\n')])])]),e("p",[t._v("编译")]),t._v(" "),e("p",[t._v("go  build -o base.so -buildmode=c-shared ./base.go")]),t._v(" "),e("p",[t._v("clang-9 -fsanitize=fuzzer base.c -o test base.so")]),t._v(" "),e("p",[t._v("运行之后可以捕捉到崩溃")]),t._v(" "),e("h2",{attrs:{id:"_0x3-内部函数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_0x3-内部函数","aria-hidden":"true"}},[t._v("#")]),t._v(" 0x3 内部函数")]),t._v(" "),e("p",[t._v("golang的url模块prase函数")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('package main\n\nimport "C"\n\nimport (\n\t"net/url"\n)\n\n//export Test\nfunc Test(str *C.char) {\n     s := C.GoString(str)\n     url.Parse(s)\n}\n\nfunc main() {\n}\n')])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('#include "base.h"\n#include <stdio.h>\n\nint LLVMFuzzerTestOneInput(char *data, int size) {\n    Test(data);\n    return 0;\n}\n')])])]),e("p",[t._v("编译")]),t._v(" "),e("p",[t._v("go  build -o base.so -buildmode=c-shared ./base.go")]),t._v(" "),e("p",[t._v("clang-9 -fsanitize=fuzzer base.c -o testurl base.so")])])}],!1,null,null,null);n.default=s.exports}}]);