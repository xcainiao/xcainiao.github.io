(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{370:function(a,e,p){"use strict";p.r(e);var t=p(1),s=Object(t.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var a=this,e=a.$createElement,p=a._self._c||e;return p("div",{staticClass:"content"},[p("h2",{attrs:{id:"git-log"}},[p("a",{staticClass:"header-anchor",attrs:{href:"#git-log","aria-hidden":"true"}},[a._v("#")]),a._v(" git log")]),a._v(" "),p("div",{staticClass:"language- extra-class"},[p("pre",{pre:!0,attrs:{class:"language-text"}},[p("code",[a._v("commit e4b3c359d3d2a9ccbea1cbb0a977af8219dd64ef\nAuthor: Kai Mast <kaimast@cs.cornell.edu>\nDate:   Wed Mar 7 18:24:57 2018 -0500\n\n    More generic reader interface\n")])])]),p("h2",{attrs:{id:"error"}},[p("a",{staticClass:"header-anchor",attrs:{href:"#error","aria-hidden":"true"}},[a._v("#")]),a._v(" error")]),a._v(" "),p("p",[a._v("/parser-test ./libpypa_assert_error_in_make_string.py")]),a._v(" "),p("div",{staticClass:"language- extra-class"},[p("pre",{pre:!0,attrs:{class:"language-text"}},[p("code",[a._v("parser-test: pypa/parser/make_string.cc:70: pypa::String pypa::make_string(const String&, bool&, bool&, bool): Assertion `string_end != String::npos && string_start <= string_end' failed.\nAborted (core dumped)\n")])])]),p("p",[a._v("testcase:https://github.com/xcainiao/poc/blob/master/libpypa_assert_error_in_make_string.py")]),a._v(" "),p("h2",{attrs:{id:"analysis"}},[p("a",{staticClass:"header-anchor",attrs:{href:"#analysis","aria-hidden":"true"}},[a._v("#")]),a._v(" analysis")]),a._v(" "),p("p",[a._v("gdb log")]),a._v(" "),p("div",{staticClass:"language- extra-class"},[p("pre",{pre:!0,attrs:{class:"language-text"}},[p("code",[a._v("Legend: code, data, rodata, value\n70\t    assert(string_end != String::npos && string_start <= string_end);\ngdb-peda$ print string_start\n$1 = 0x5\ngdb-peda$ print string_end\n$2 = 0x4\ngdb-peda$ bt\n#0  pypa::make_string (input=\"'''''a'''\", unicode=@0x60700000df10: 0x0, raw=@0x7fffffffbb00: 0x0, ignore_escaping=0x0) at pypa/parser/make_string.cc:70\n#1  0x00000000004cd40f in pypa::atom (s=..., ast=std::shared_ptr (count 2, weak 0) 0x60700000dee0) at pypa/parser/parser.cc:841\n#2  0x00000000004d277b in pypa::power (s=..., ast=std::shared_ptr (count 2, weak 0) 0x60700000dee0) at pypa/parser/parser.cc:1355\n#3  0x00000000004d05d3 in pypa::factor (s=..., ast=std::shared_ptr (count 2, weak 0) 0x60700000dee0) at pypa/parser/parser.cc:1173\n#4  0x00000000004d8fa6 in pypa::term (s=..., ast=std::shared_ptr (count 2, weak 0) 0x60700000dee0) at pypa/parser/parser.cc:2006\n#5  0x00000000004ddf1c in pypa::arith_expr (s=..., ast=std::shared_ptr (count 2, weak 0) 0x60700000dee0) at pypa/parser/parser.cc:2529\n#6  0x00000000004cea4f in pypa::shift_expr (s=..., ast=std::shared_ptr (count 2, weak 0) 0x60700000dee0) at pypa/parser/parser.cc:996\n#7  0x00000000004e215a in pypa::generic_binop_expr<bool (*)(pypa::(anonymous namespace)::State&, std::shared_ptr<pypa::AstExpression>&)> (s=..., ast=std::shared_ptr (count 2, weak 0) 0x60700000dee0, \n    op=pypa::TokenKind::BinAnd, op_type=pypa::AstBinOpType::BitAnd, fun=0x4ce95c <pypa::shift_expr(pypa::(anonymous namespace)::State&, pypa::AstExpr&)>) at pypa/parser/parser.cc:190\n#8  0x00000000004d2363 in pypa::and_expr (s=..., ast=std::shared_ptr (count 2, weak 0) 0x60700000dee0) at pypa/parser/parser.cc:1326\n#9  0x00000000004e215a in pypa::generic_binop_expr<bool (*)(pypa::(anonymous namespace)::State&, std::shared_ptr<pypa::AstExpression>&)> (s=..., ast=std::shared_ptr (count 2, weak 0) 0x60700000dee0, \n    op=pypa::TokenKind::CircumFlex, op_type=pypa::AstBinOpType::BitXor, fun=0x4d2333 <pypa::and_expr(pypa::(anonymous namespace)::State&, pypa::AstExpr&)>) at pypa/parser/parser.cc:190\n#10 0x00000000004d96ef in pypa::xor_expr (s=..., ast=std::shared_ptr (count 2, weak 0) 0x60700000dee0) at pypa/parser/parser.cc:2046\n#11 0x00000000004e215a in pypa::generic_binop_expr<bool (*)(pypa::(anonymous namespace)::State&, std::shared_ptr<pypa::AstExpression>&)> (s=..., ast=std::shared_ptr (count 2, weak 0) 0x60700000dee0, \n    op=pypa::TokenKind::BinOr, op_type=pypa::AstBinOpType::BitOr, fun=0x4d96bf <pypa::xor_expr(pypa::(anonymous namespace)::State&, pypa::AstExpr&)>) at pypa/parser/parser.cc:190\n#12 0x00000000004da227 in pypa::expr (s=..., ast=std::shared_ptr (count 2, weak 0) 0x60700000dee0) at pypa/parser/parser.cc:2145\n#13 0x00000000004d8acb in pypa::comparison (s=..., ast=std::shared_ptr (count 2, weak 0) 0x60700000dee0) at pypa/parser/parser.cc:1980\n#14 0x00000000004c9fa1 in pypa::not_test (s=..., ast=std::shared_ptr (count 2, weak 0) 0x60700000dee0) at pypa/parser/parser.cc:461\n#15 0x00000000004e2793 in pypa::generic_boolop_expr<bool (*)(pypa::(anonymous namespace)::State&, std::shared_ptr<pypa::AstExpression>&)> (s=..., ast=std::shared_ptr (count 2, weak 0) 0x60700000dee0, \n    op=pypa::Token::KeywordAnd, op_type=pypa::AstBoolOpType::And, fun=0x4c9d9f <pypa::not_test(pypa::(anonymous namespace)::State&, pypa::AstExpr&)>) at pypa/parser/parser.cc:209\n#16 0x00000000004d4d79 in pypa::and_test (s=..., ast=std::shared_ptr (count 2, weak 0) 0x60700000dee0) at pypa/parser/parser.cc:1613\n#17 0x00000000004e2793 in pypa::generic_boolop_expr<bool (*)(pypa::(anonymous namespace)::State&, std::shared_ptr<pypa::AstExpression>&)> (s=..., ast=std::shared_ptr (count 2, weak 0) 0x60700000dee0, \n    op=pypa::Token::KeywordOr, op_type=pypa::AstBoolOpType::Or, fun=0x4d4d49 <pypa::and_test(pypa::(anonymous namespace)::State&, pypa::AstExpr&)>) at pypa/parser/parser.cc:209\n#18 0x00000000004d9721 in pypa::or_test (s=..., ast=std::shared_ptr (count 2, weak 0) 0x60700000dee0) at pypa/parser/parser.cc:2050\n#19 0x00000000004d089a in pypa::test (s=..., ast=std::shared_ptr (count 2, weak 0) 0x60700000dee0) at pypa/parser/parser.cc:1179\n#20 0x00000000004d36e2 in pypa::testlist (s=..., ast=std::shared_ptr (count 2, weak 0) 0x60600000eaf0) at pypa/parser/parser.cc:1462\n#21 0x00000000004d6732 in pypa::expr_stmt (s=..., ast=std::shared_ptr (count 2, weak 0) 0x60400000dfe0) at pypa/parser/parser.cc:1730\n#22 0x00000000004c960e in pypa::small_stmt (s=..., ast=std::shared_ptr (count 2, weak 0) 0x60400000dfe0) at pypa/parser/parser.cc:394\n#23 0x00000000004cf324 in pypa::simple_stmt (s=..., ast=std::shared_ptr (count 2, weak 0) 0x60600000eb50) at pypa/parser/parser.cc:1045\n#24 0x00000000004d3e48 in pypa::stmt (s=..., ast=std::shared_ptr (count 2, weak 0) 0x60600000eb50) at pypa/parser/parser.cc:1516\n#25 0x00000000004dfb61 in pypa::file_input (s=..., ast=std::shared_ptr (count 1, weak 0) 0x60600000ec10) at pypa/parser/parser.cc:2728\n#26 0x00000000004e0a93 in pypa::parse (lexer=..., ast=std::shared_ptr (count 1, weak 0) 0x60600000ec10, symbols=std::shared_ptr (empty) 0x0, options=...) at pypa/parser/parser.cc:2781\n#27 0x00000000004af15f in main (argc=0x2, argv=0x7fffffffdf28) at pypa/parser/test.cc:35\n#28 0x00007ffff6aeb830 in __libc_start_main (main=0x4aef36 <main(int, char const**)>, argc=0x2, argv=0x7fffffffdf28, init=<optimized out>, fini=<optimized out>, rtld_fini=<optimized out>, \n    stack_end=0x7fffffffdf18) at ../csu/libc-start.c:291\n#29 0x0000000000407de9 in _start ()\n")])])]),p("h2",{attrs:{id:"fuzz"}},[p("a",{staticClass:"header-anchor",attrs:{href:"#fuzz","aria-hidden":"true"}},[a._v("#")]),a._v(" fuzz")]),a._v(" "),p("p",[a._v("libfuzz")]),a._v(" "),p("div",{staticClass:"language- extra-class"},[p("pre",{pre:!0,attrs:{class:"language-text"}},[p("code",[a._v('#include <cstdio>\n\n#include <pypa/parser/parser.hh>\n\nnamespace pypa {\n    void dump(AstPtr);\n}\n\n//int main(int argc, char const ** argv) \n#define filename  "./xxxx.py"\nextern "C" int LLVMFuzzerTestOneInput(char *data, int size)\n{\n    \n    FILE* temfile = fopen(filename,"w");\n    fwrite(data, 1, size, temfile);\n    fclose(temfile);\n\n    pypa::AstModulePtr ast;\n    pypa::SymbolTablePtr symbols;\n    pypa::ParserOptions options;\n    // options.python3allowed = true;\n    options.printerrors = true;\n    options.printdbgerrors = true;\n    pypa::Lexer lexer(filename);\n    if(pypa::parse(lexer, ast, symbols, options)) {\n        printf("Parsing successfull\\n");\n        dump(ast);\n    }   \n    else {\n        fprintf(stderr, "Parsing failed\\n");\n        return 0;\n    }   \n    return 0;\n}\n\n')])])])])}],!1,null,null,null);e.default=s.exports}}]);