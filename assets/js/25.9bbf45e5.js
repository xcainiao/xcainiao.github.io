(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{368:function(f,a,e){"use strict";e.r(a);var n=e(1),t=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var f=this,a=f.$createElement,e=f._self._c||a;return e("div",{staticClass:"content"},[e("h2",{attrs:{id:"git-log"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-log","aria-hidden":"true"}},[f._v("#")]),f._v(" git log")]),f._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[f._v("commit 206ef1b560efed48aabcb9374ea0e6e832b59f7e\nAuthor: Andre Renaud <arenaud@designa-electronics.com>\nDate:   Wed Apr 4 08:59:06 2018 +1200\n")])])]),e("h2",{attrs:{id:"test-code"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#test-code","aria-hidden":"true"}},[f._v("#")]),f._v(" test code")]),f._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[f._v('int main(int argc, char *argv[])\n{\n    struct pdf_info info = { \n     .creator = "hello",\n     .producer = "world",\n     .title = "My document",\n     .author = "My name",\n     .subject = "My subject",\n     .date = "Today"\n     };  \n    struct pdf_doc *pdf = pdf_create(PDF_A4_WIDTH, PDF_A4_HEIGHT, &info);\n    pdf_set_font(pdf, "Times-Roman");\n    pdf_append_page(pdf);\n    pdf_add_jpeg(pdf, NULL, 100, 500, 50, 150, "./poc.jpg");\n    //pdf_add_text(pdf, NULL, data, 30, 0, 400, PDF_RGB(0xff, 0, 0));\n    pdf_save(pdf, "output.pdf");\n    pdf_destroy(pdf);\n    return 0;\n}\n')])])]),e("h2",{attrs:{id:"error"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#error","aria-hidden":"true"}},[f._v("#")]),f._v(" error")]),f._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[f._v("==6203==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x60200000efd6 at pc 0x00000040c5a6 bp 0x7ffcbb9c1da0 sp 0x7ffcbb9c1d90\nREAD of size 1 at 0x60200000efd6 thread T0\n    #0 0x40c5a5 in jpeg_size /home/github/PDFGen_bak/pdfgen.c:2015\n    #1 0x40c5a5 in pdf_add_raw_jpeg /home/github/PDFGen_bak/pdfgen.c:2079\n    #2 0x40c5a5 in pdf_add_jpeg /home/github/PDFGen_bak/pdfgen.c:2208\n    #3 0x401bd4 in main /home/github/PDFGen_bak/main.c:19\n    #4 0x7fcc3558382f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2082f)\n    #5 0x401d08 in _start (/home/github/PDFGen_bak/testprog+0x401d08)\n\n0x60200000efd6 is located 0 bytes to the right of 6-byte region [0x60200000efd0,0x60200000efd6)\nallocated by thread T0 here:\n    #0 0x7fcc359cb602 in malloc (/usr/lib/x86_64-linux-gnu/libasan.so.2+0x98602)\n    #1 0x40b914 in pdf_add_raw_jpeg /home/github/PDFGen_bak/pdfgen.c:2064\n    #2 0x40b914 in pdf_add_jpeg /home/github/PDFGen_bak/pdfgen.c:2208\n\nSUMMARY: AddressSanitizer: heap-buffer-overflow /home/github/PDFGen_bak/pdfgen.c:2015 jpeg_size\nShadow bytes around the buggy address:\n  0x0c047fff9da0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c047fff9db0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c047fff9dc0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c047fff9dd0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c047fff9de0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n=>0x0c047fff9df0: fa fa fa fa fa fa fa fa fa fa[06]fa fa fa 00 fa\n  0x0c047fff9e00: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c047fff9e10: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c047fff9e20: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c047fff9e30: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c047fff9e40: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\nShadow byte legend (one shadow byte represents 8 application bytes):\n  Addressable:           00\n  Partially addressable: 01 02 03 04 05 06 07 \n  Heap left redzone:       fa\n  Heap right redzone:      fb\n  Freed heap region:       fd\n  Stack left redzone:      f1\n  Stack mid redzone:       f2\n  Stack right redzone:     f3\n  Stack partial redzone:   f4\n  Stack after return:      f5\n  Stack use after scope:   f8\n  Global redzone:          f9\n  Global init order:       f6\n  Poisoned by user:        f7\n  Container overflow:      fc\n  Array cookie:            ac\n  Intra object redzone:    bb\n  ASan internal:           fe\n==6203==ABORTING\n")])])]),e("p",[f._v("testcase: https://github.com/xcainiao/poc/blob/master/PDFGen_heap-buffer-overflow_in_jpeg_size.jpg")]),f._v(" "),e("h2",{attrs:{id:"analysis"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#analysis","aria-hidden":"true"}},[f._v("#")]),f._v(" analysis")]),f._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[f._v('static pdf_object *pdf_add_raw_jpeg(struct pdf_doc *pdf,\n                                    const char *jpeg_file)\n{\n    ....\n    if (stat(jpeg_file, &buf) < 0) { \n        pdf_set_err(pdf, -errno, "Unable to access %s: %s", jpeg_file,\n                    strerror(errno));\n        return NULL;\n    }    \n\n    len = buf.st_size;\n    ....\n    if (jpeg_size(jpeg_data, len, &width, &height) < 0) { \n        free(jpeg_data);\n        pdf_set_err(pdf, -EINVAL, "Unable to determine jpeg width/height from %s",\n                    jpeg_file);\n        return NULL;\n    }    \n    ....\n}\n')])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[f._v("static int jpeg_size(unsigned char* data, unsigned int data_size,\n                     int *width, int *height)\n{\n    int i = 0; \n    if (i + 3 < data_size && data[i] == 0xFF && data[i+1] == 0xD8 &&\n            data[i+2] == 0xFF && data[i+3] == 0xE0) {\n        i += 4;\n        if(data[i+2] == 'J' && data[i+3] == 'F' && data[i+4] == 'I'\n                && data[i+5] == 'F' && data[i+6] == 0x00) \n                ....\n  }\n")])])]),e("p",[f._v("gdb")]),f._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[f._v("[----------------------------------registers-----------------------------------]\nRAX: 0x6 \nRBX: 0x7fffffffdb50 --\x3e 0x61300000de80 --\x3e 0x0 \nRCX: 0x7ffff6b96be5 (<__GI___xstat+21>:\tcmp    rax,0xfffffffffffff000)\nRDX: 0x7fffffffda90 --\x3e 0x80c \nRSI: 0x410f00 --\x3e 0x6272 ('rb')\nRDI: 0x4122c0 --\x3e 0x67706a2e782f2e ('./x.jpg')\nRBP: 0xffffffffb46 --\x3e 0x0 \nRSP: 0x7fffffffda00 --\x3e 0xffffffffffffffff \nRIP: 0x40b8f7 (<pdf_add_jpeg+247>:\tmov    QWORD PTR [rsp],rax)\nR8 : 0x32 ('2')\nR9 : 0x96 \nR10: 0x7bc \nR11: 0x246 \nR12: 0x7fffffffda30 --\x3e 0x41b58ab3 \nR13: 0x7fffffffdba0 --\x3e 0x41b58ab3 \nR14: 0x4122c0 --\x3e 0x67706a2e782f2e ('./x.jpg')\nR15: 0x0\nEFLAGS: 0x202 (carry parity adjust zero sign trap INTERRUPT direction overflow)\n[-------------------------------------code-------------------------------------]\n   0x40b8e7 <pdf_add_jpeg+231>:\tmov    esi,0x410f00\n   0x40b8ec <pdf_add_jpeg+236>:\tmov    rdi,r14\n   0x40b8ef <pdf_add_jpeg+239>:\tadd    QWORD PTR [rip+0x20fe99],0x1        # 0x61b790 <__gcov0.pdf_add_raw_jpeg+16>\n=> 0x40b8f7 <pdf_add_jpeg+247>:\tmov    QWORD PTR [rsp],rax\n   0x40b8fb <pdf_add_jpeg+251>:\tcall   0x4018e0 <fopen@plt>\n   0x40b900 <pdf_add_jpeg+256>:\ttest   rax,rax\n   0x40b903 <pdf_add_jpeg+259>:\tmov    r13,rax\n   0x40b906 <pdf_add_jpeg+262>:\tje     0x40c332 <pdf_add_jpeg+2866>\n[------------------------------------stack-------------------------------------]\n0000| 0x7fffffffda00 --\x3e 0xffffffffffffffff \n0008| 0x7fffffffda08 --\x3e 0x61300000de80 --\x3e 0x0 \n0016| 0x7fffffffda10 --\x3e 0x0 \n0024| 0x7fffffffda18 --\x3e 0x1f400000064 --\x3e 0x0 \n0032| 0x7fffffffda20 --\x3e 0x9600000032 --\x3e 0x0 \n0040| 0x7fffffffda28 --\x3e 0xffffffffffffffff \n0048| 0x7fffffffda30 --\x3e 0x41b58ab3 \n0056| 0x7fffffffda38 --\x3e 0x40e744 (\"2 32 16 3 str 96 144 3 buf \")\n[------------------------------------------------------------------------------]\nLegend: code, data, rodata, value\n2056\t    len = buf.st_size;\ngdb-peda$ print len\n$1 = 0x6\n")])])]),e("p",[f._v("len = 6;\ndata[i+6] == 0x00       //error")]),f._v(" "),e("h2",{attrs:{id:"fuzz"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#fuzz","aria-hidden":"true"}},[f._v("#")]),f._v(" fuzz")]),f._v(" "),e("p",[f._v("libfuzz")]),f._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[f._v('#include <stdio.h>\n#include <string.h>\n\n#include "pdfgen.h"\n\n#define filename  "./x.jpg"\nint LLVMFuzzerTestOneInput(char *data, int size)\n{\n    FILE* temfile = fopen(filename,"w");\n    fwrite(data, 1, size, temfile);\n    fclose(temfile);\n\n    struct pdf_info info = { \n     .creator = "hello",\n     .producer = "world",\n     .title = "My document",\n     .author = "My name",\n     .subject = "My subject",\n     .date = "Today"\n     };  \n    struct pdf_doc *pdf = pdf_create(PDF_A4_WIDTH, PDF_A4_HEIGHT, &info);\n    pdf_set_font(pdf, "Times-Roman");\n    pdf_append_page(pdf);\n    pdf_add_jpeg(pdf, NULL, 100, 500, 50, 150, filename);\n    //pdf_add_text(pdf, NULL, data, 30, 0, 400, PDF_RGB(0xff, 0, 0));\n    pdf_save(pdf, "output.pdf");\n    pdf_destroy(pdf);\n    return 0;\n}\n')])])])])}],!1,null,null,null);a.default=t.exports}}]);